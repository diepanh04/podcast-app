
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends Prisma.PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};

export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = {
  id: string
  name: string | null
  email: string | null
  emailVerified: Date | null
  image: string | null
}

/**
 * Model Genre
 * 
 */
export type Genre = {
  id: number
  name: string
}

/**
 * Model Channel
 * 
 */
export type Channel = {
  id: string
  title: string
  publisher: string
  thumbnail: string
}

/**
 * Model GenresOnChannels
 * 
 */
export type GenresOnChannels = {
  channelId: string
  genreId: number
}

/**
 * Model Episode
 * 
 */
export type Episode = {
  id: string
  title: string
  thumbnail: string
  channelId: string
}

/**
 * Model Heart
 * 
 */
export type Heart = {
  id: string
  userId: string
}

/**
 * Model ChannelHeart
 * 
 */
export type ChannelHeart = {
  id: string
  heartId: string
  channelId: string
}

/**
 * Model EpisodeHeart
 * 
 */
export type EpisodeHeart = {
  id: string
  heartId: string
  episodeId: string
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<this, "$connect" | "$disconnect" | "$on" | "$transaction" | "$use">) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.genre`: Exposes CRUD operations for the **Genre** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Genres
    * const genres = await prisma.genre.findMany()
    * ```
    */
  get genre(): Prisma.GenreDelegate<GlobalReject>;

  /**
   * `prisma.channel`: Exposes CRUD operations for the **Channel** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Channels
    * const channels = await prisma.channel.findMany()
    * ```
    */
  get channel(): Prisma.ChannelDelegate<GlobalReject>;

  /**
   * `prisma.genresOnChannels`: Exposes CRUD operations for the **GenresOnChannels** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GenresOnChannels
    * const genresOnChannels = await prisma.genresOnChannels.findMany()
    * ```
    */
  get genresOnChannels(): Prisma.GenresOnChannelsDelegate<GlobalReject>;

  /**
   * `prisma.episode`: Exposes CRUD operations for the **Episode** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Episodes
    * const episodes = await prisma.episode.findMany()
    * ```
    */
  get episode(): Prisma.EpisodeDelegate<GlobalReject>;

  /**
   * `prisma.heart`: Exposes CRUD operations for the **Heart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Hearts
    * const hearts = await prisma.heart.findMany()
    * ```
    */
  get heart(): Prisma.HeartDelegate<GlobalReject>;

  /**
   * `prisma.channelHeart`: Exposes CRUD operations for the **ChannelHeart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChannelHearts
    * const channelHearts = await prisma.channelHeart.findMany()
    * ```
    */
  get channelHeart(): Prisma.ChannelHeartDelegate<GlobalReject>;

  /**
   * `prisma.episodeHeart`: Exposes CRUD operations for the **EpisodeHeart** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more EpisodeHearts
    * const episodeHearts = await prisma.episodeHeart.findMany()
    * ```
    */
  get episodeHeart(): Prisma.EpisodeHeartDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = runtime.Types.Public.PrismaPromise<T>

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket


  /**
   * Prisma Client JS version: 4.15.0
   * Query Engine version: 8fbc245156db7124f997f4cecdd8d1219e360944
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: runtime.Types.Utils.LegacyExact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Genre: 'Genre',
    Channel: 'Channel',
    GenresOnChannels: 'GenresOnChannels',
    Episode: 'Episode',
    Heart: 'Heart',
    ChannelHeart: 'ChannelHeart',
    EpisodeHeart: 'EpisodeHeart'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, '$connect' | '$disconnect' | '$on' | '$transaction' | '$use'>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    hearts: number
  }

  export type UserCountOutputTypeSelect = {
    hearts?: boolean
  }

  export type UserCountOutputTypeGetPayload<S extends boolean | null | undefined | UserCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? UserCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (UserCountOutputTypeArgs)
    ? UserCountOutputType 
    : S extends { select: any } & (UserCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
      : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type GenreCountOutputType
   */


  export type GenreCountOutputType = {
    channels: number
  }

  export type GenreCountOutputTypeSelect = {
    channels?: boolean
  }

  export type GenreCountOutputTypeGetPayload<S extends boolean | null | undefined | GenreCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GenreCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (GenreCountOutputTypeArgs)
    ? GenreCountOutputType 
    : S extends { select: any } & (GenreCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof GenreCountOutputType ? GenreCountOutputType[P] : never
  } 
      : GenreCountOutputType




  // Custom InputTypes

  /**
   * GenreCountOutputType without action
   */
  export type GenreCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the GenreCountOutputType
     */
    select?: GenreCountOutputTypeSelect | null
  }



  /**
   * Count Type ChannelCountOutputType
   */


  export type ChannelCountOutputType = {
    genres: number
    episodes: number
    channelHearts: number
  }

  export type ChannelCountOutputTypeSelect = {
    genres?: boolean
    episodes?: boolean
    channelHearts?: boolean
  }

  export type ChannelCountOutputTypeGetPayload<S extends boolean | null | undefined | ChannelCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChannelCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (ChannelCountOutputTypeArgs)
    ? ChannelCountOutputType 
    : S extends { select: any } & (ChannelCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof ChannelCountOutputType ? ChannelCountOutputType[P] : never
  } 
      : ChannelCountOutputType




  // Custom InputTypes

  /**
   * ChannelCountOutputType without action
   */
  export type ChannelCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the ChannelCountOutputType
     */
    select?: ChannelCountOutputTypeSelect | null
  }



  /**
   * Count Type EpisodeCountOutputType
   */


  export type EpisodeCountOutputType = {
    episodeHearts: number
  }

  export type EpisodeCountOutputTypeSelect = {
    episodeHearts?: boolean
  }

  export type EpisodeCountOutputTypeGetPayload<S extends boolean | null | undefined | EpisodeCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EpisodeCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (EpisodeCountOutputTypeArgs)
    ? EpisodeCountOutputType 
    : S extends { select: any } & (EpisodeCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof EpisodeCountOutputType ? EpisodeCountOutputType[P] : never
  } 
      : EpisodeCountOutputType




  // Custom InputTypes

  /**
   * EpisodeCountOutputType without action
   */
  export type EpisodeCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the EpisodeCountOutputType
     */
    select?: EpisodeCountOutputTypeSelect | null
  }



  /**
   * Count Type HeartCountOutputType
   */


  export type HeartCountOutputType = {
    channelHearts: number
    episodeHearts: number
  }

  export type HeartCountOutputTypeSelect = {
    channelHearts?: boolean
    episodeHearts?: boolean
  }

  export type HeartCountOutputTypeGetPayload<S extends boolean | null | undefined | HeartCountOutputTypeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? HeartCountOutputType :
    S extends undefined ? never :
    S extends { include: any } & (HeartCountOutputTypeArgs)
    ? HeartCountOutputType 
    : S extends { select: any } & (HeartCountOutputTypeArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
    P extends keyof HeartCountOutputType ? HeartCountOutputType[P] : never
  } 
      : HeartCountOutputType




  // Custom InputTypes

  /**
   * HeartCountOutputType without action
   */
  export type HeartCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the HeartCountOutputType
     */
    select?: HeartCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    hearts?: boolean | User$heartsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }


  export type UserInclude = {
    hearts?: boolean | User$heartsArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<S extends boolean | null | undefined | UserArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? User :
    S extends undefined ? never :
    S extends { include: any } & (UserArgs | UserFindManyArgs)
    ? User  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'hearts' ? Array < HeartGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (UserArgs | UserFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'hearts' ? Array < HeartGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
      : User


  type UserCountArgs = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<UserGetPayload<T>> : Prisma__UserClient<UserGetPayload<T> | null, null>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): Prisma.PrismaPromise<Array<UserGetPayload<T>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs>(
      args?: SelectSubset<T, UserCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): Prisma__UserClient<UserGetPayload<T>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    hearts<T extends User$heartsArgs= {}>(args?: Subset<T, User$heartsArgs>): Prisma.PrismaPromise<Array<HeartGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs extends UserFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs extends UserFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.hearts
   */
  export type User$heartsArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    where?: HeartWhereInput
    orderBy?: Enumerable<HeartOrderByWithRelationInput>
    cursor?: HeartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<HeartScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude | null
  }



  /**
   * Model Genre
   */


  export type AggregateGenre = {
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  export type GenreAvgAggregateOutputType = {
    id: number | null
  }

  export type GenreSumAggregateOutputType = {
    id: number | null
  }

  export type GenreMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type GenreCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type GenreAvgAggregateInputType = {
    id?: true
  }

  export type GenreSumAggregateInputType = {
    id?: true
  }

  export type GenreMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type GenreCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type GenreAggregateArgs = {
    /**
     * Filter which Genre to aggregate.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Genres
    **/
    _count?: true | GenreCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenreAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenreSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenreMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenreMaxAggregateInputType
  }

  export type GetGenreAggregateType<T extends GenreAggregateArgs> = {
        [P in keyof T & keyof AggregateGenre]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenre[P]>
      : GetScalarType<T[P], AggregateGenre[P]>
  }




  export type GenreGroupByArgs = {
    where?: GenreWhereInput
    orderBy?: Enumerable<GenreOrderByWithAggregationInput>
    by: GenreScalarFieldEnum[]
    having?: GenreScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenreCountAggregateInputType | true
    _avg?: GenreAvgAggregateInputType
    _sum?: GenreSumAggregateInputType
    _min?: GenreMinAggregateInputType
    _max?: GenreMaxAggregateInputType
  }


  export type GenreGroupByOutputType = {
    id: number
    name: string
    _count: GenreCountAggregateOutputType | null
    _avg: GenreAvgAggregateOutputType | null
    _sum: GenreSumAggregateOutputType | null
    _min: GenreMinAggregateOutputType | null
    _max: GenreMaxAggregateOutputType | null
  }

  type GetGenreGroupByPayload<T extends GenreGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GenreGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenreGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenreGroupByOutputType[P]>
            : GetScalarType<T[P], GenreGroupByOutputType[P]>
        }
      >
    >


  export type GenreSelect = {
    id?: boolean
    name?: boolean
    channels?: boolean | Genre$channelsArgs
    _count?: boolean | GenreCountOutputTypeArgs
  }


  export type GenreInclude = {
    channels?: boolean | Genre$channelsArgs
    _count?: boolean | GenreCountOutputTypeArgs
  }

  export type GenreGetPayload<S extends boolean | null | undefined | GenreArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Genre :
    S extends undefined ? never :
    S extends { include: any } & (GenreArgs | GenreFindManyArgs)
    ? Genre  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channels' ? Array < GenresOnChannelsGetPayload<S['include'][P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GenreArgs | GenreFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channels' ? Array < GenresOnChannelsGetPayload<S['select'][P]>>  :
        P extends '_count' ? GenreCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Genre ? Genre[P] : never
  } 
      : Genre


  type GenreCountArgs = 
    Omit<GenreFindManyArgs, 'select' | 'include'> & {
      select?: GenreCountAggregateInputType | true
    }

  export interface GenreDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Genre that matches the filter.
     * @param {GenreFindUniqueArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenreFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GenreFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Genre'> extends True ? Prisma__GenreClient<GenreGetPayload<T>> : Prisma__GenreClient<GenreGetPayload<T> | null, null>

    /**
     * Find one Genre that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GenreFindUniqueOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GenreFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GenreFindUniqueOrThrowArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Find the first Genre that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenreFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GenreFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Genre'> extends True ? Prisma__GenreClient<GenreGetPayload<T>> : Prisma__GenreClient<GenreGetPayload<T> | null, null>

    /**
     * Find the first Genre that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindFirstOrThrowArgs} args - Arguments to find a Genre
     * @example
     * // Get one Genre
     * const genre = await prisma.genre.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GenreFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GenreFindFirstOrThrowArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Find zero or more Genres that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Genres
     * const genres = await prisma.genre.findMany()
     * 
     * // Get first 10 Genres
     * const genres = await prisma.genre.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const genreWithIdOnly = await prisma.genre.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends GenreFindManyArgs>(
      args?: SelectSubset<T, GenreFindManyArgs>
    ): Prisma.PrismaPromise<Array<GenreGetPayload<T>>>

    /**
     * Create a Genre.
     * @param {GenreCreateArgs} args - Arguments to create a Genre.
     * @example
     * // Create one Genre
     * const Genre = await prisma.genre.create({
     *   data: {
     *     // ... data to create a Genre
     *   }
     * })
     * 
    **/
    create<T extends GenreCreateArgs>(
      args: SelectSubset<T, GenreCreateArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Create many Genres.
     *     @param {GenreCreateManyArgs} args - Arguments to create many Genres.
     *     @example
     *     // Create many Genres
     *     const genre = await prisma.genre.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GenreCreateManyArgs>(
      args?: SelectSubset<T, GenreCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Genre.
     * @param {GenreDeleteArgs} args - Arguments to delete one Genre.
     * @example
     * // Delete one Genre
     * const Genre = await prisma.genre.delete({
     *   where: {
     *     // ... filter to delete one Genre
     *   }
     * })
     * 
    **/
    delete<T extends GenreDeleteArgs>(
      args: SelectSubset<T, GenreDeleteArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Update one Genre.
     * @param {GenreUpdateArgs} args - Arguments to update one Genre.
     * @example
     * // Update one Genre
     * const genre = await prisma.genre.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenreUpdateArgs>(
      args: SelectSubset<T, GenreUpdateArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Delete zero or more Genres.
     * @param {GenreDeleteManyArgs} args - Arguments to filter Genres to delete.
     * @example
     * // Delete a few Genres
     * const { count } = await prisma.genre.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenreDeleteManyArgs>(
      args?: SelectSubset<T, GenreDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Genres
     * const genre = await prisma.genre.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenreUpdateManyArgs>(
      args: SelectSubset<T, GenreUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Genre.
     * @param {GenreUpsertArgs} args - Arguments to update or create a Genre.
     * @example
     * // Update or create a Genre
     * const genre = await prisma.genre.upsert({
     *   create: {
     *     // ... data to create a Genre
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Genre we want to update
     *   }
     * })
    **/
    upsert<T extends GenreUpsertArgs>(
      args: SelectSubset<T, GenreUpsertArgs>
    ): Prisma__GenreClient<GenreGetPayload<T>>

    /**
     * Count the number of Genres.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreCountArgs} args - Arguments to filter Genres to count.
     * @example
     * // Count the number of Genres
     * const count = await prisma.genre.count({
     *   where: {
     *     // ... the filter for the Genres we want to count
     *   }
     * })
    **/
    count<T extends GenreCountArgs>(
      args?: Subset<T, GenreCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenreCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenreAggregateArgs>(args: Subset<T, GenreAggregateArgs>): Prisma.PrismaPromise<GetGenreAggregateType<T>>

    /**
     * Group by Genre.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenreGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenreGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenreGroupByArgs['orderBy'] }
        : { orderBy?: GenreGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenreGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenreGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Genre.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenreClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channels<T extends Genre$channelsArgs= {}>(args?: Subset<T, Genre$channelsArgs>): Prisma.PrismaPromise<Array<GenresOnChannelsGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Genre base type for findUnique actions
   */
  export type GenreFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }

  /**
   * Genre findUnique
   */
  export interface GenreFindUniqueArgs extends GenreFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre findUniqueOrThrow
   */
  export type GenreFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where: GenreWhereUniqueInput
  }


  /**
   * Genre base type for findFirst actions
   */
  export type GenreFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: Enumerable<GenreScalarFieldEnum>
  }

  /**
   * Genre findFirst
   */
  export interface GenreFindFirstArgs extends GenreFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Genre findFirstOrThrow
   */
  export type GenreFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genre to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Genres.
     */
    distinct?: Enumerable<GenreScalarFieldEnum>
  }


  /**
   * Genre findMany
   */
  export type GenreFindManyArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter, which Genres to fetch.
     */
    where?: GenreWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Genres to fetch.
     */
    orderBy?: Enumerable<GenreOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Genres.
     */
    cursor?: GenreWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Genres from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Genres.
     */
    skip?: number
    distinct?: Enumerable<GenreScalarFieldEnum>
  }


  /**
   * Genre create
   */
  export type GenreCreateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * The data needed to create a Genre.
     */
    data: XOR<GenreCreateInput, GenreUncheckedCreateInput>
  }


  /**
   * Genre createMany
   */
  export type GenreCreateManyArgs = {
    /**
     * The data used to create many Genres.
     */
    data: Enumerable<GenreCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Genre update
   */
  export type GenreUpdateArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * The data needed to update a Genre.
     */
    data: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
    /**
     * Choose, which Genre to update.
     */
    where: GenreWhereUniqueInput
  }


  /**
   * Genre updateMany
   */
  export type GenreUpdateManyArgs = {
    /**
     * The data used to update Genres.
     */
    data: XOR<GenreUpdateManyMutationInput, GenreUncheckedUpdateManyInput>
    /**
     * Filter which Genres to update
     */
    where?: GenreWhereInput
  }


  /**
   * Genre upsert
   */
  export type GenreUpsertArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * The filter to search for the Genre to update in case it exists.
     */
    where: GenreWhereUniqueInput
    /**
     * In case the Genre found by the `where` argument doesn't exist, create a new Genre with this data.
     */
    create: XOR<GenreCreateInput, GenreUncheckedCreateInput>
    /**
     * In case the Genre was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenreUpdateInput, GenreUncheckedUpdateInput>
  }


  /**
   * Genre delete
   */
  export type GenreDeleteArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
    /**
     * Filter which Genre to delete.
     */
    where: GenreWhereUniqueInput
  }


  /**
   * Genre deleteMany
   */
  export type GenreDeleteManyArgs = {
    /**
     * Filter which Genres to delete
     */
    where?: GenreWhereInput
  }


  /**
   * Genre.channels
   */
  export type Genre$channelsArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    where?: GenresOnChannelsWhereInput
    orderBy?: Enumerable<GenresOnChannelsOrderByWithRelationInput>
    cursor?: GenresOnChannelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GenresOnChannelsScalarFieldEnum>
  }


  /**
   * Genre without action
   */
  export type GenreArgs = {
    /**
     * Select specific fields to fetch from the Genre
     */
    select?: GenreSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenreInclude | null
  }



  /**
   * Model Channel
   */


  export type AggregateChannel = {
    _count: ChannelCountAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  export type ChannelMinAggregateOutputType = {
    id: string | null
    title: string | null
    publisher: string | null
    thumbnail: string | null
  }

  export type ChannelMaxAggregateOutputType = {
    id: string | null
    title: string | null
    publisher: string | null
    thumbnail: string | null
  }

  export type ChannelCountAggregateOutputType = {
    id: number
    title: number
    publisher: number
    thumbnail: number
    _all: number
  }


  export type ChannelMinAggregateInputType = {
    id?: true
    title?: true
    publisher?: true
    thumbnail?: true
  }

  export type ChannelMaxAggregateInputType = {
    id?: true
    title?: true
    publisher?: true
    thumbnail?: true
  }

  export type ChannelCountAggregateInputType = {
    id?: true
    title?: true
    publisher?: true
    thumbnail?: true
    _all?: true
  }

  export type ChannelAggregateArgs = {
    /**
     * Filter which Channel to aggregate.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Channels
    **/
    _count?: true | ChannelCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelMaxAggregateInputType
  }

  export type GetChannelAggregateType<T extends ChannelAggregateArgs> = {
        [P in keyof T & keyof AggregateChannel]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannel[P]>
      : GetScalarType<T[P], AggregateChannel[P]>
  }




  export type ChannelGroupByArgs = {
    where?: ChannelWhereInput
    orderBy?: Enumerable<ChannelOrderByWithAggregationInput>
    by: ChannelScalarFieldEnum[]
    having?: ChannelScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelCountAggregateInputType | true
    _min?: ChannelMinAggregateInputType
    _max?: ChannelMaxAggregateInputType
  }


  export type ChannelGroupByOutputType = {
    id: string
    title: string
    publisher: string
    thumbnail: string
    _count: ChannelCountAggregateOutputType | null
    _min: ChannelMinAggregateOutputType | null
    _max: ChannelMaxAggregateOutputType | null
  }

  type GetChannelGroupByPayload<T extends ChannelGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChannelGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelGroupByOutputType[P]>
        }
      >
    >


  export type ChannelSelect = {
    id?: boolean
    title?: boolean
    publisher?: boolean
    thumbnail?: boolean
    genres?: boolean | Channel$genresArgs
    episodes?: boolean | Channel$episodesArgs
    channelHearts?: boolean | Channel$channelHeartsArgs
    _count?: boolean | ChannelCountOutputTypeArgs
  }


  export type ChannelInclude = {
    genres?: boolean | Channel$genresArgs
    episodes?: boolean | Channel$episodesArgs
    channelHearts?: boolean | Channel$channelHeartsArgs
    _count?: boolean | ChannelCountOutputTypeArgs
  }

  export type ChannelGetPayload<S extends boolean | null | undefined | ChannelArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Channel :
    S extends undefined ? never :
    S extends { include: any } & (ChannelArgs | ChannelFindManyArgs)
    ? Channel  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'genres' ? Array < GenresOnChannelsGetPayload<S['include'][P]>>  :
        P extends 'episodes' ? Array < EpisodeGetPayload<S['include'][P]>>  :
        P extends 'channelHearts' ? Array < ChannelHeartGetPayload<S['include'][P]>>  :
        P extends '_count' ? ChannelCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChannelArgs | ChannelFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'genres' ? Array < GenresOnChannelsGetPayload<S['select'][P]>>  :
        P extends 'episodes' ? Array < EpisodeGetPayload<S['select'][P]>>  :
        P extends 'channelHearts' ? Array < ChannelHeartGetPayload<S['select'][P]>>  :
        P extends '_count' ? ChannelCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Channel ? Channel[P] : never
  } 
      : Channel


  type ChannelCountArgs = 
    Omit<ChannelFindManyArgs, 'select' | 'include'> & {
      select?: ChannelCountAggregateInputType | true
    }

  export interface ChannelDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Channel that matches the filter.
     * @param {ChannelFindUniqueArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChannelFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Channel'> extends True ? Prisma__ChannelClient<ChannelGetPayload<T>> : Prisma__ChannelClient<ChannelGetPayload<T> | null, null>

    /**
     * Find one Channel that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelFindUniqueOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChannelFindUniqueOrThrowArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Find the first Channel that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChannelFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Channel'> extends True ? Prisma__ChannelClient<ChannelGetPayload<T>> : Prisma__ChannelClient<ChannelGetPayload<T> | null, null>

    /**
     * Find the first Channel that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindFirstOrThrowArgs} args - Arguments to find a Channel
     * @example
     * // Get one Channel
     * const channel = await prisma.channel.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChannelFindFirstOrThrowArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Find zero or more Channels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Channels
     * const channels = await prisma.channel.findMany()
     * 
     * // Get first 10 Channels
     * const channels = await prisma.channel.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelWithIdOnly = await prisma.channel.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelFindManyArgs>(
      args?: SelectSubset<T, ChannelFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChannelGetPayload<T>>>

    /**
     * Create a Channel.
     * @param {ChannelCreateArgs} args - Arguments to create a Channel.
     * @example
     * // Create one Channel
     * const Channel = await prisma.channel.create({
     *   data: {
     *     // ... data to create a Channel
     *   }
     * })
     * 
    **/
    create<T extends ChannelCreateArgs>(
      args: SelectSubset<T, ChannelCreateArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Create many Channels.
     *     @param {ChannelCreateManyArgs} args - Arguments to create many Channels.
     *     @example
     *     // Create many Channels
     *     const channel = await prisma.channel.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelCreateManyArgs>(
      args?: SelectSubset<T, ChannelCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Channel.
     * @param {ChannelDeleteArgs} args - Arguments to delete one Channel.
     * @example
     * // Delete one Channel
     * const Channel = await prisma.channel.delete({
     *   where: {
     *     // ... filter to delete one Channel
     *   }
     * })
     * 
    **/
    delete<T extends ChannelDeleteArgs>(
      args: SelectSubset<T, ChannelDeleteArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Update one Channel.
     * @param {ChannelUpdateArgs} args - Arguments to update one Channel.
     * @example
     * // Update one Channel
     * const channel = await prisma.channel.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelUpdateArgs>(
      args: SelectSubset<T, ChannelUpdateArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Delete zero or more Channels.
     * @param {ChannelDeleteManyArgs} args - Arguments to filter Channels to delete.
     * @example
     * // Delete a few Channels
     * const { count } = await prisma.channel.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelDeleteManyArgs>(
      args?: SelectSubset<T, ChannelDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Channels
     * const channel = await prisma.channel.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelUpdateManyArgs>(
      args: SelectSubset<T, ChannelUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Channel.
     * @param {ChannelUpsertArgs} args - Arguments to update or create a Channel.
     * @example
     * // Update or create a Channel
     * const channel = await prisma.channel.upsert({
     *   create: {
     *     // ... data to create a Channel
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Channel we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelUpsertArgs>(
      args: SelectSubset<T, ChannelUpsertArgs>
    ): Prisma__ChannelClient<ChannelGetPayload<T>>

    /**
     * Count the number of Channels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelCountArgs} args - Arguments to filter Channels to count.
     * @example
     * // Count the number of Channels
     * const count = await prisma.channel.count({
     *   where: {
     *     // ... the filter for the Channels we want to count
     *   }
     * })
    **/
    count<T extends ChannelCountArgs>(
      args?: Subset<T, ChannelCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelAggregateArgs>(args: Subset<T, ChannelAggregateArgs>): Prisma.PrismaPromise<GetChannelAggregateType<T>>

    /**
     * Group by Channel.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelGroupByArgs['orderBy'] }
        : { orderBy?: ChannelGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Channel.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    genres<T extends Channel$genresArgs= {}>(args?: Subset<T, Channel$genresArgs>): Prisma.PrismaPromise<Array<GenresOnChannelsGetPayload<T>>| Null>;

    episodes<T extends Channel$episodesArgs= {}>(args?: Subset<T, Channel$episodesArgs>): Prisma.PrismaPromise<Array<EpisodeGetPayload<T>>| Null>;

    channelHearts<T extends Channel$channelHeartsArgs= {}>(args?: Subset<T, Channel$channelHeartsArgs>): Prisma.PrismaPromise<Array<ChannelHeartGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Channel base type for findUnique actions
   */
  export type ChannelFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }

  /**
   * Channel findUnique
   */
  export interface ChannelFindUniqueArgs extends ChannelFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channel findUniqueOrThrow
   */
  export type ChannelFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel base type for findFirst actions
   */
  export type ChannelFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }

  /**
   * Channel findFirst
   */
  export interface ChannelFindFirstArgs extends ChannelFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Channel findFirstOrThrow
   */
  export type ChannelFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channel to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Channels.
     */
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }


  /**
   * Channel findMany
   */
  export type ChannelFindManyArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter, which Channels to fetch.
     */
    where?: ChannelWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Channels to fetch.
     */
    orderBy?: Enumerable<ChannelOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Channels.
     */
    cursor?: ChannelWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Channels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Channels.
     */
    skip?: number
    distinct?: Enumerable<ChannelScalarFieldEnum>
  }


  /**
   * Channel create
   */
  export type ChannelCreateArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The data needed to create a Channel.
     */
    data: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
  }


  /**
   * Channel createMany
   */
  export type ChannelCreateManyArgs = {
    /**
     * The data used to create many Channels.
     */
    data: Enumerable<ChannelCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Channel update
   */
  export type ChannelUpdateArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The data needed to update a Channel.
     */
    data: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
    /**
     * Choose, which Channel to update.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel updateMany
   */
  export type ChannelUpdateManyArgs = {
    /**
     * The data used to update Channels.
     */
    data: XOR<ChannelUpdateManyMutationInput, ChannelUncheckedUpdateManyInput>
    /**
     * Filter which Channels to update
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel upsert
   */
  export type ChannelUpsertArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * The filter to search for the Channel to update in case it exists.
     */
    where: ChannelWhereUniqueInput
    /**
     * In case the Channel found by the `where` argument doesn't exist, create a new Channel with this data.
     */
    create: XOR<ChannelCreateInput, ChannelUncheckedCreateInput>
    /**
     * In case the Channel was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelUpdateInput, ChannelUncheckedUpdateInput>
  }


  /**
   * Channel delete
   */
  export type ChannelDeleteArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
    /**
     * Filter which Channel to delete.
     */
    where: ChannelWhereUniqueInput
  }


  /**
   * Channel deleteMany
   */
  export type ChannelDeleteManyArgs = {
    /**
     * Filter which Channels to delete
     */
    where?: ChannelWhereInput
  }


  /**
   * Channel.genres
   */
  export type Channel$genresArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    where?: GenresOnChannelsWhereInput
    orderBy?: Enumerable<GenresOnChannelsOrderByWithRelationInput>
    cursor?: GenresOnChannelsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<GenresOnChannelsScalarFieldEnum>
  }


  /**
   * Channel.episodes
   */
  export type Channel$episodesArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    where?: EpisodeWhereInput
    orderBy?: Enumerable<EpisodeOrderByWithRelationInput>
    cursor?: EpisodeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EpisodeScalarFieldEnum>
  }


  /**
   * Channel.channelHearts
   */
  export type Channel$channelHeartsArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    where?: ChannelHeartWhereInput
    orderBy?: Enumerable<ChannelHeartOrderByWithRelationInput>
    cursor?: ChannelHeartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelHeartScalarFieldEnum>
  }


  /**
   * Channel without action
   */
  export type ChannelArgs = {
    /**
     * Select specific fields to fetch from the Channel
     */
    select?: ChannelSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelInclude | null
  }



  /**
   * Model GenresOnChannels
   */


  export type AggregateGenresOnChannels = {
    _count: GenresOnChannelsCountAggregateOutputType | null
    _avg: GenresOnChannelsAvgAggregateOutputType | null
    _sum: GenresOnChannelsSumAggregateOutputType | null
    _min: GenresOnChannelsMinAggregateOutputType | null
    _max: GenresOnChannelsMaxAggregateOutputType | null
  }

  export type GenresOnChannelsAvgAggregateOutputType = {
    genreId: number | null
  }

  export type GenresOnChannelsSumAggregateOutputType = {
    genreId: number | null
  }

  export type GenresOnChannelsMinAggregateOutputType = {
    channelId: string | null
    genreId: number | null
  }

  export type GenresOnChannelsMaxAggregateOutputType = {
    channelId: string | null
    genreId: number | null
  }

  export type GenresOnChannelsCountAggregateOutputType = {
    channelId: number
    genreId: number
    _all: number
  }


  export type GenresOnChannelsAvgAggregateInputType = {
    genreId?: true
  }

  export type GenresOnChannelsSumAggregateInputType = {
    genreId?: true
  }

  export type GenresOnChannelsMinAggregateInputType = {
    channelId?: true
    genreId?: true
  }

  export type GenresOnChannelsMaxAggregateInputType = {
    channelId?: true
    genreId?: true
  }

  export type GenresOnChannelsCountAggregateInputType = {
    channelId?: true
    genreId?: true
    _all?: true
  }

  export type GenresOnChannelsAggregateArgs = {
    /**
     * Filter which GenresOnChannels to aggregate.
     */
    where?: GenresOnChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenresOnChannels to fetch.
     */
    orderBy?: Enumerable<GenresOnChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: GenresOnChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenresOnChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenresOnChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned GenresOnChannels
    **/
    _count?: true | GenresOnChannelsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GenresOnChannelsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GenresOnChannelsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GenresOnChannelsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GenresOnChannelsMaxAggregateInputType
  }

  export type GetGenresOnChannelsAggregateType<T extends GenresOnChannelsAggregateArgs> = {
        [P in keyof T & keyof AggregateGenresOnChannels]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGenresOnChannels[P]>
      : GetScalarType<T[P], AggregateGenresOnChannels[P]>
  }




  export type GenresOnChannelsGroupByArgs = {
    where?: GenresOnChannelsWhereInput
    orderBy?: Enumerable<GenresOnChannelsOrderByWithAggregationInput>
    by: GenresOnChannelsScalarFieldEnum[]
    having?: GenresOnChannelsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GenresOnChannelsCountAggregateInputType | true
    _avg?: GenresOnChannelsAvgAggregateInputType
    _sum?: GenresOnChannelsSumAggregateInputType
    _min?: GenresOnChannelsMinAggregateInputType
    _max?: GenresOnChannelsMaxAggregateInputType
  }


  export type GenresOnChannelsGroupByOutputType = {
    channelId: string
    genreId: number
    _count: GenresOnChannelsCountAggregateOutputType | null
    _avg: GenresOnChannelsAvgAggregateOutputType | null
    _sum: GenresOnChannelsSumAggregateOutputType | null
    _min: GenresOnChannelsMinAggregateOutputType | null
    _max: GenresOnChannelsMaxAggregateOutputType | null
  }

  type GetGenresOnChannelsGroupByPayload<T extends GenresOnChannelsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<GenresOnChannelsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GenresOnChannelsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GenresOnChannelsGroupByOutputType[P]>
            : GetScalarType<T[P], GenresOnChannelsGroupByOutputType[P]>
        }
      >
    >


  export type GenresOnChannelsSelect = {
    channelId?: boolean
    genreId?: boolean
    channel?: boolean | ChannelArgs
    genre?: boolean | GenreArgs
  }


  export type GenresOnChannelsInclude = {
    channel?: boolean | ChannelArgs
    genre?: boolean | GenreArgs
  }

  export type GenresOnChannelsGetPayload<S extends boolean | null | undefined | GenresOnChannelsArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? GenresOnChannels :
    S extends undefined ? never :
    S extends { include: any } & (GenresOnChannelsArgs | GenresOnChannelsFindManyArgs)
    ? GenresOnChannels  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :
        P extends 'genre' ? GenreGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (GenresOnChannelsArgs | GenresOnChannelsFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :
        P extends 'genre' ? GenreGetPayload<S['select'][P]> :  P extends keyof GenresOnChannels ? GenresOnChannels[P] : never
  } 
      : GenresOnChannels


  type GenresOnChannelsCountArgs = 
    Omit<GenresOnChannelsFindManyArgs, 'select' | 'include'> & {
      select?: GenresOnChannelsCountAggregateInputType | true
    }

  export interface GenresOnChannelsDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one GenresOnChannels that matches the filter.
     * @param {GenresOnChannelsFindUniqueArgs} args - Arguments to find a GenresOnChannels
     * @example
     * // Get one GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends GenresOnChannelsFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, GenresOnChannelsFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'GenresOnChannels'> extends True ? Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>> : Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T> | null, null>

    /**
     * Find one GenresOnChannels that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {GenresOnChannelsFindUniqueOrThrowArgs} args - Arguments to find a GenresOnChannels
     * @example
     * // Get one GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends GenresOnChannelsFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, GenresOnChannelsFindUniqueOrThrowArgs>
    ): Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>>

    /**
     * Find the first GenresOnChannels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenresOnChannelsFindFirstArgs} args - Arguments to find a GenresOnChannels
     * @example
     * // Get one GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends GenresOnChannelsFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, GenresOnChannelsFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'GenresOnChannels'> extends True ? Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>> : Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T> | null, null>

    /**
     * Find the first GenresOnChannels that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenresOnChannelsFindFirstOrThrowArgs} args - Arguments to find a GenresOnChannels
     * @example
     * // Get one GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends GenresOnChannelsFindFirstOrThrowArgs>(
      args?: SelectSubset<T, GenresOnChannelsFindFirstOrThrowArgs>
    ): Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>>

    /**
     * Find zero or more GenresOnChannels that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenresOnChannelsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.findMany()
     * 
     * // Get first 10 GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.findMany({ take: 10 })
     * 
     * // Only select the `channelId`
     * const genresOnChannelsWithChannelIdOnly = await prisma.genresOnChannels.findMany({ select: { channelId: true } })
     * 
    **/
    findMany<T extends GenresOnChannelsFindManyArgs>(
      args?: SelectSubset<T, GenresOnChannelsFindManyArgs>
    ): Prisma.PrismaPromise<Array<GenresOnChannelsGetPayload<T>>>

    /**
     * Create a GenresOnChannels.
     * @param {GenresOnChannelsCreateArgs} args - Arguments to create a GenresOnChannels.
     * @example
     * // Create one GenresOnChannels
     * const GenresOnChannels = await prisma.genresOnChannels.create({
     *   data: {
     *     // ... data to create a GenresOnChannels
     *   }
     * })
     * 
    **/
    create<T extends GenresOnChannelsCreateArgs>(
      args: SelectSubset<T, GenresOnChannelsCreateArgs>
    ): Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>>

    /**
     * Create many GenresOnChannels.
     *     @param {GenresOnChannelsCreateManyArgs} args - Arguments to create many GenresOnChannels.
     *     @example
     *     // Create many GenresOnChannels
     *     const genresOnChannels = await prisma.genresOnChannels.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends GenresOnChannelsCreateManyArgs>(
      args?: SelectSubset<T, GenresOnChannelsCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GenresOnChannels.
     * @param {GenresOnChannelsDeleteArgs} args - Arguments to delete one GenresOnChannels.
     * @example
     * // Delete one GenresOnChannels
     * const GenresOnChannels = await prisma.genresOnChannels.delete({
     *   where: {
     *     // ... filter to delete one GenresOnChannels
     *   }
     * })
     * 
    **/
    delete<T extends GenresOnChannelsDeleteArgs>(
      args: SelectSubset<T, GenresOnChannelsDeleteArgs>
    ): Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>>

    /**
     * Update one GenresOnChannels.
     * @param {GenresOnChannelsUpdateArgs} args - Arguments to update one GenresOnChannels.
     * @example
     * // Update one GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends GenresOnChannelsUpdateArgs>(
      args: SelectSubset<T, GenresOnChannelsUpdateArgs>
    ): Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>>

    /**
     * Delete zero or more GenresOnChannels.
     * @param {GenresOnChannelsDeleteManyArgs} args - Arguments to filter GenresOnChannels to delete.
     * @example
     * // Delete a few GenresOnChannels
     * const { count } = await prisma.genresOnChannels.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends GenresOnChannelsDeleteManyArgs>(
      args?: SelectSubset<T, GenresOnChannelsDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GenresOnChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenresOnChannelsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends GenresOnChannelsUpdateManyArgs>(
      args: SelectSubset<T, GenresOnChannelsUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GenresOnChannels.
     * @param {GenresOnChannelsUpsertArgs} args - Arguments to update or create a GenresOnChannels.
     * @example
     * // Update or create a GenresOnChannels
     * const genresOnChannels = await prisma.genresOnChannels.upsert({
     *   create: {
     *     // ... data to create a GenresOnChannels
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GenresOnChannels we want to update
     *   }
     * })
    **/
    upsert<T extends GenresOnChannelsUpsertArgs>(
      args: SelectSubset<T, GenresOnChannelsUpsertArgs>
    ): Prisma__GenresOnChannelsClient<GenresOnChannelsGetPayload<T>>

    /**
     * Count the number of GenresOnChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenresOnChannelsCountArgs} args - Arguments to filter GenresOnChannels to count.
     * @example
     * // Count the number of GenresOnChannels
     * const count = await prisma.genresOnChannels.count({
     *   where: {
     *     // ... the filter for the GenresOnChannels we want to count
     *   }
     * })
    **/
    count<T extends GenresOnChannelsCountArgs>(
      args?: Subset<T, GenresOnChannelsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GenresOnChannelsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GenresOnChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenresOnChannelsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GenresOnChannelsAggregateArgs>(args: Subset<T, GenresOnChannelsAggregateArgs>): Prisma.PrismaPromise<GetGenresOnChannelsAggregateType<T>>

    /**
     * Group by GenresOnChannels.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GenresOnChannelsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends GenresOnChannelsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: GenresOnChannelsGroupByArgs['orderBy'] }
        : { orderBy?: GenresOnChannelsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, GenresOnChannelsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGenresOnChannelsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for GenresOnChannels.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__GenresOnChannelsClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    genre<T extends GenreArgs= {}>(args?: Subset<T, GenreArgs>): Prisma__GenreClient<GenreGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * GenresOnChannels base type for findUnique actions
   */
  export type GenresOnChannelsFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * Filter, which GenresOnChannels to fetch.
     */
    where: GenresOnChannelsWhereUniqueInput
  }

  /**
   * GenresOnChannels findUnique
   */
  export interface GenresOnChannelsFindUniqueArgs extends GenresOnChannelsFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GenresOnChannels findUniqueOrThrow
   */
  export type GenresOnChannelsFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * Filter, which GenresOnChannels to fetch.
     */
    where: GenresOnChannelsWhereUniqueInput
  }


  /**
   * GenresOnChannels base type for findFirst actions
   */
  export type GenresOnChannelsFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * Filter, which GenresOnChannels to fetch.
     */
    where?: GenresOnChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenresOnChannels to fetch.
     */
    orderBy?: Enumerable<GenresOnChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GenresOnChannels.
     */
    cursor?: GenresOnChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenresOnChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenresOnChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GenresOnChannels.
     */
    distinct?: Enumerable<GenresOnChannelsScalarFieldEnum>
  }

  /**
   * GenresOnChannels findFirst
   */
  export interface GenresOnChannelsFindFirstArgs extends GenresOnChannelsFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * GenresOnChannels findFirstOrThrow
   */
  export type GenresOnChannelsFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * Filter, which GenresOnChannels to fetch.
     */
    where?: GenresOnChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenresOnChannels to fetch.
     */
    orderBy?: Enumerable<GenresOnChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for GenresOnChannels.
     */
    cursor?: GenresOnChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenresOnChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenresOnChannels.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of GenresOnChannels.
     */
    distinct?: Enumerable<GenresOnChannelsScalarFieldEnum>
  }


  /**
   * GenresOnChannels findMany
   */
  export type GenresOnChannelsFindManyArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * Filter, which GenresOnChannels to fetch.
     */
    where?: GenresOnChannelsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of GenresOnChannels to fetch.
     */
    orderBy?: Enumerable<GenresOnChannelsOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing GenresOnChannels.
     */
    cursor?: GenresOnChannelsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` GenresOnChannels from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` GenresOnChannels.
     */
    skip?: number
    distinct?: Enumerable<GenresOnChannelsScalarFieldEnum>
  }


  /**
   * GenresOnChannels create
   */
  export type GenresOnChannelsCreateArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * The data needed to create a GenresOnChannels.
     */
    data: XOR<GenresOnChannelsCreateInput, GenresOnChannelsUncheckedCreateInput>
  }


  /**
   * GenresOnChannels createMany
   */
  export type GenresOnChannelsCreateManyArgs = {
    /**
     * The data used to create many GenresOnChannels.
     */
    data: Enumerable<GenresOnChannelsCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * GenresOnChannels update
   */
  export type GenresOnChannelsUpdateArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * The data needed to update a GenresOnChannels.
     */
    data: XOR<GenresOnChannelsUpdateInput, GenresOnChannelsUncheckedUpdateInput>
    /**
     * Choose, which GenresOnChannels to update.
     */
    where: GenresOnChannelsWhereUniqueInput
  }


  /**
   * GenresOnChannels updateMany
   */
  export type GenresOnChannelsUpdateManyArgs = {
    /**
     * The data used to update GenresOnChannels.
     */
    data: XOR<GenresOnChannelsUpdateManyMutationInput, GenresOnChannelsUncheckedUpdateManyInput>
    /**
     * Filter which GenresOnChannels to update
     */
    where?: GenresOnChannelsWhereInput
  }


  /**
   * GenresOnChannels upsert
   */
  export type GenresOnChannelsUpsertArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * The filter to search for the GenresOnChannels to update in case it exists.
     */
    where: GenresOnChannelsWhereUniqueInput
    /**
     * In case the GenresOnChannels found by the `where` argument doesn't exist, create a new GenresOnChannels with this data.
     */
    create: XOR<GenresOnChannelsCreateInput, GenresOnChannelsUncheckedCreateInput>
    /**
     * In case the GenresOnChannels was found with the provided `where` argument, update it with this data.
     */
    update: XOR<GenresOnChannelsUpdateInput, GenresOnChannelsUncheckedUpdateInput>
  }


  /**
   * GenresOnChannels delete
   */
  export type GenresOnChannelsDeleteArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
    /**
     * Filter which GenresOnChannels to delete.
     */
    where: GenresOnChannelsWhereUniqueInput
  }


  /**
   * GenresOnChannels deleteMany
   */
  export type GenresOnChannelsDeleteManyArgs = {
    /**
     * Filter which GenresOnChannels to delete
     */
    where?: GenresOnChannelsWhereInput
  }


  /**
   * GenresOnChannels without action
   */
  export type GenresOnChannelsArgs = {
    /**
     * Select specific fields to fetch from the GenresOnChannels
     */
    select?: GenresOnChannelsSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: GenresOnChannelsInclude | null
  }



  /**
   * Model Episode
   */


  export type AggregateEpisode = {
    _count: EpisodeCountAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  export type EpisodeMinAggregateOutputType = {
    id: string | null
    title: string | null
    thumbnail: string | null
    channelId: string | null
  }

  export type EpisodeMaxAggregateOutputType = {
    id: string | null
    title: string | null
    thumbnail: string | null
    channelId: string | null
  }

  export type EpisodeCountAggregateOutputType = {
    id: number
    title: number
    thumbnail: number
    channelId: number
    _all: number
  }


  export type EpisodeMinAggregateInputType = {
    id?: true
    title?: true
    thumbnail?: true
    channelId?: true
  }

  export type EpisodeMaxAggregateInputType = {
    id?: true
    title?: true
    thumbnail?: true
    channelId?: true
  }

  export type EpisodeCountAggregateInputType = {
    id?: true
    title?: true
    thumbnail?: true
    channelId?: true
    _all?: true
  }

  export type EpisodeAggregateArgs = {
    /**
     * Filter which Episode to aggregate.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: Enumerable<EpisodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Episodes
    **/
    _count?: true | EpisodeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodeMaxAggregateInputType
  }

  export type GetEpisodeAggregateType<T extends EpisodeAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisode]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisode[P]>
      : GetScalarType<T[P], AggregateEpisode[P]>
  }




  export type EpisodeGroupByArgs = {
    where?: EpisodeWhereInput
    orderBy?: Enumerable<EpisodeOrderByWithAggregationInput>
    by: EpisodeScalarFieldEnum[]
    having?: EpisodeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodeCountAggregateInputType | true
    _min?: EpisodeMinAggregateInputType
    _max?: EpisodeMaxAggregateInputType
  }


  export type EpisodeGroupByOutputType = {
    id: string
    title: string
    thumbnail: string
    channelId: string
    _count: EpisodeCountAggregateOutputType | null
    _min: EpisodeMinAggregateOutputType | null
    _max: EpisodeMaxAggregateOutputType | null
  }

  type GetEpisodeGroupByPayload<T extends EpisodeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EpisodeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodeGroupByOutputType[P]>
        }
      >
    >


  export type EpisodeSelect = {
    id?: boolean
    title?: boolean
    thumbnail?: boolean
    channelId?: boolean
    channel?: boolean | ChannelArgs
    episodeHearts?: boolean | Episode$episodeHeartsArgs
    _count?: boolean | EpisodeCountOutputTypeArgs
  }


  export type EpisodeInclude = {
    channel?: boolean | ChannelArgs
    episodeHearts?: boolean | Episode$episodeHeartsArgs
    _count?: boolean | EpisodeCountOutputTypeArgs
  }

  export type EpisodeGetPayload<S extends boolean | null | undefined | EpisodeArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Episode :
    S extends undefined ? never :
    S extends { include: any } & (EpisodeArgs | EpisodeFindManyArgs)
    ? Episode  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :
        P extends 'episodeHearts' ? Array < EpisodeHeartGetPayload<S['include'][P]>>  :
        P extends '_count' ? EpisodeCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EpisodeArgs | EpisodeFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :
        P extends 'episodeHearts' ? Array < EpisodeHeartGetPayload<S['select'][P]>>  :
        P extends '_count' ? EpisodeCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Episode ? Episode[P] : never
  } 
      : Episode


  type EpisodeCountArgs = 
    Omit<EpisodeFindManyArgs, 'select' | 'include'> & {
      select?: EpisodeCountAggregateInputType | true
    }

  export interface EpisodeDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Episode that matches the filter.
     * @param {EpisodeFindUniqueArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EpisodeFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EpisodeFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Episode'> extends True ? Prisma__EpisodeClient<EpisodeGetPayload<T>> : Prisma__EpisodeClient<EpisodeGetPayload<T> | null, null>

    /**
     * Find one Episode that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EpisodeFindUniqueOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EpisodeFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EpisodeFindUniqueOrThrowArgs>
    ): Prisma__EpisodeClient<EpisodeGetPayload<T>>

    /**
     * Find the first Episode that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindFirstArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EpisodeFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EpisodeFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Episode'> extends True ? Prisma__EpisodeClient<EpisodeGetPayload<T>> : Prisma__EpisodeClient<EpisodeGetPayload<T> | null, null>

    /**
     * Find the first Episode that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindFirstOrThrowArgs} args - Arguments to find a Episode
     * @example
     * // Get one Episode
     * const episode = await prisma.episode.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EpisodeFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EpisodeFindFirstOrThrowArgs>
    ): Prisma__EpisodeClient<EpisodeGetPayload<T>>

    /**
     * Find zero or more Episodes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Episodes
     * const episodes = await prisma.episode.findMany()
     * 
     * // Get first 10 Episodes
     * const episodes = await prisma.episode.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodeWithIdOnly = await prisma.episode.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EpisodeFindManyArgs>(
      args?: SelectSubset<T, EpisodeFindManyArgs>
    ): Prisma.PrismaPromise<Array<EpisodeGetPayload<T>>>

    /**
     * Create a Episode.
     * @param {EpisodeCreateArgs} args - Arguments to create a Episode.
     * @example
     * // Create one Episode
     * const Episode = await prisma.episode.create({
     *   data: {
     *     // ... data to create a Episode
     *   }
     * })
     * 
    **/
    create<T extends EpisodeCreateArgs>(
      args: SelectSubset<T, EpisodeCreateArgs>
    ): Prisma__EpisodeClient<EpisodeGetPayload<T>>

    /**
     * Create many Episodes.
     *     @param {EpisodeCreateManyArgs} args - Arguments to create many Episodes.
     *     @example
     *     // Create many Episodes
     *     const episode = await prisma.episode.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EpisodeCreateManyArgs>(
      args?: SelectSubset<T, EpisodeCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Episode.
     * @param {EpisodeDeleteArgs} args - Arguments to delete one Episode.
     * @example
     * // Delete one Episode
     * const Episode = await prisma.episode.delete({
     *   where: {
     *     // ... filter to delete one Episode
     *   }
     * })
     * 
    **/
    delete<T extends EpisodeDeleteArgs>(
      args: SelectSubset<T, EpisodeDeleteArgs>
    ): Prisma__EpisodeClient<EpisodeGetPayload<T>>

    /**
     * Update one Episode.
     * @param {EpisodeUpdateArgs} args - Arguments to update one Episode.
     * @example
     * // Update one Episode
     * const episode = await prisma.episode.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EpisodeUpdateArgs>(
      args: SelectSubset<T, EpisodeUpdateArgs>
    ): Prisma__EpisodeClient<EpisodeGetPayload<T>>

    /**
     * Delete zero or more Episodes.
     * @param {EpisodeDeleteManyArgs} args - Arguments to filter Episodes to delete.
     * @example
     * // Delete a few Episodes
     * const { count } = await prisma.episode.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EpisodeDeleteManyArgs>(
      args?: SelectSubset<T, EpisodeDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Episodes
     * const episode = await prisma.episode.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EpisodeUpdateManyArgs>(
      args: SelectSubset<T, EpisodeUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Episode.
     * @param {EpisodeUpsertArgs} args - Arguments to update or create a Episode.
     * @example
     * // Update or create a Episode
     * const episode = await prisma.episode.upsert({
     *   create: {
     *     // ... data to create a Episode
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Episode we want to update
     *   }
     * })
    **/
    upsert<T extends EpisodeUpsertArgs>(
      args: SelectSubset<T, EpisodeUpsertArgs>
    ): Prisma__EpisodeClient<EpisodeGetPayload<T>>

    /**
     * Count the number of Episodes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeCountArgs} args - Arguments to filter Episodes to count.
     * @example
     * // Count the number of Episodes
     * const count = await prisma.episode.count({
     *   where: {
     *     // ... the filter for the Episodes we want to count
     *   }
     * })
    **/
    count<T extends EpisodeCountArgs>(
      args?: Subset<T, EpisodeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodeAggregateArgs>(args: Subset<T, EpisodeAggregateArgs>): Prisma.PrismaPromise<GetEpisodeAggregateType<T>>

    /**
     * Group by Episode.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EpisodeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EpisodeGroupByArgs['orderBy'] }
        : { orderBy?: EpisodeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EpisodeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Episode.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EpisodeClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    episodeHearts<T extends Episode$episodeHeartsArgs= {}>(args?: Subset<T, Episode$episodeHeartsArgs>): Prisma.PrismaPromise<Array<EpisodeHeartGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Episode base type for findUnique actions
   */
  export type EpisodeFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * Filter, which Episode to fetch.
     */
    where: EpisodeWhereUniqueInput
  }

  /**
   * Episode findUnique
   */
  export interface EpisodeFindUniqueArgs extends EpisodeFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Episode findUniqueOrThrow
   */
  export type EpisodeFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * Filter, which Episode to fetch.
     */
    where: EpisodeWhereUniqueInput
  }


  /**
   * Episode base type for findFirst actions
   */
  export type EpisodeFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * Filter, which Episode to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: Enumerable<EpisodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Episodes.
     */
    distinct?: Enumerable<EpisodeScalarFieldEnum>
  }

  /**
   * Episode findFirst
   */
  export interface EpisodeFindFirstArgs extends EpisodeFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Episode findFirstOrThrow
   */
  export type EpisodeFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * Filter, which Episode to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: Enumerable<EpisodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Episodes.
     */
    distinct?: Enumerable<EpisodeScalarFieldEnum>
  }


  /**
   * Episode findMany
   */
  export type EpisodeFindManyArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * Filter, which Episodes to fetch.
     */
    where?: EpisodeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Episodes to fetch.
     */
    orderBy?: Enumerable<EpisodeOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Episodes.
     */
    cursor?: EpisodeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Episodes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Episodes.
     */
    skip?: number
    distinct?: Enumerable<EpisodeScalarFieldEnum>
  }


  /**
   * Episode create
   */
  export type EpisodeCreateArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * The data needed to create a Episode.
     */
    data: XOR<EpisodeCreateInput, EpisodeUncheckedCreateInput>
  }


  /**
   * Episode createMany
   */
  export type EpisodeCreateManyArgs = {
    /**
     * The data used to create many Episodes.
     */
    data: Enumerable<EpisodeCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Episode update
   */
  export type EpisodeUpdateArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * The data needed to update a Episode.
     */
    data: XOR<EpisodeUpdateInput, EpisodeUncheckedUpdateInput>
    /**
     * Choose, which Episode to update.
     */
    where: EpisodeWhereUniqueInput
  }


  /**
   * Episode updateMany
   */
  export type EpisodeUpdateManyArgs = {
    /**
     * The data used to update Episodes.
     */
    data: XOR<EpisodeUpdateManyMutationInput, EpisodeUncheckedUpdateManyInput>
    /**
     * Filter which Episodes to update
     */
    where?: EpisodeWhereInput
  }


  /**
   * Episode upsert
   */
  export type EpisodeUpsertArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * The filter to search for the Episode to update in case it exists.
     */
    where: EpisodeWhereUniqueInput
    /**
     * In case the Episode found by the `where` argument doesn't exist, create a new Episode with this data.
     */
    create: XOR<EpisodeCreateInput, EpisodeUncheckedCreateInput>
    /**
     * In case the Episode was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EpisodeUpdateInput, EpisodeUncheckedUpdateInput>
  }


  /**
   * Episode delete
   */
  export type EpisodeDeleteArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
    /**
     * Filter which Episode to delete.
     */
    where: EpisodeWhereUniqueInput
  }


  /**
   * Episode deleteMany
   */
  export type EpisodeDeleteManyArgs = {
    /**
     * Filter which Episodes to delete
     */
    where?: EpisodeWhereInput
  }


  /**
   * Episode.episodeHearts
   */
  export type Episode$episodeHeartsArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    where?: EpisodeHeartWhereInput
    orderBy?: Enumerable<EpisodeHeartOrderByWithRelationInput>
    cursor?: EpisodeHeartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EpisodeHeartScalarFieldEnum>
  }


  /**
   * Episode without action
   */
  export type EpisodeArgs = {
    /**
     * Select specific fields to fetch from the Episode
     */
    select?: EpisodeSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeInclude | null
  }



  /**
   * Model Heart
   */


  export type AggregateHeart = {
    _count: HeartCountAggregateOutputType | null
    _min: HeartMinAggregateOutputType | null
    _max: HeartMaxAggregateOutputType | null
  }

  export type HeartMinAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HeartMaxAggregateOutputType = {
    id: string | null
    userId: string | null
  }

  export type HeartCountAggregateOutputType = {
    id: number
    userId: number
    _all: number
  }


  export type HeartMinAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HeartMaxAggregateInputType = {
    id?: true
    userId?: true
  }

  export type HeartCountAggregateInputType = {
    id?: true
    userId?: true
    _all?: true
  }

  export type HeartAggregateArgs = {
    /**
     * Filter which Heart to aggregate.
     */
    where?: HeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hearts to fetch.
     */
    orderBy?: Enumerable<HeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Hearts
    **/
    _count?: true | HeartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HeartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HeartMaxAggregateInputType
  }

  export type GetHeartAggregateType<T extends HeartAggregateArgs> = {
        [P in keyof T & keyof AggregateHeart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHeart[P]>
      : GetScalarType<T[P], AggregateHeart[P]>
  }




  export type HeartGroupByArgs = {
    where?: HeartWhereInput
    orderBy?: Enumerable<HeartOrderByWithAggregationInput>
    by: HeartScalarFieldEnum[]
    having?: HeartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HeartCountAggregateInputType | true
    _min?: HeartMinAggregateInputType
    _max?: HeartMaxAggregateInputType
  }


  export type HeartGroupByOutputType = {
    id: string
    userId: string
    _count: HeartCountAggregateOutputType | null
    _min: HeartMinAggregateOutputType | null
    _max: HeartMaxAggregateOutputType | null
  }

  type GetHeartGroupByPayload<T extends HeartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<HeartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HeartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HeartGroupByOutputType[P]>
            : GetScalarType<T[P], HeartGroupByOutputType[P]>
        }
      >
    >


  export type HeartSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserArgs
    channelHearts?: boolean | Heart$channelHeartsArgs
    episodeHearts?: boolean | Heart$episodeHeartsArgs
    _count?: boolean | HeartCountOutputTypeArgs
  }


  export type HeartInclude = {
    user?: boolean | UserArgs
    channelHearts?: boolean | Heart$channelHeartsArgs
    episodeHearts?: boolean | Heart$episodeHeartsArgs
    _count?: boolean | HeartCountOutputTypeArgs
  }

  export type HeartGetPayload<S extends boolean | null | undefined | HeartArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? Heart :
    S extends undefined ? never :
    S extends { include: any } & (HeartArgs | HeartFindManyArgs)
    ? Heart  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'user' ? UserGetPayload<S['include'][P]> :
        P extends 'channelHearts' ? Array < ChannelHeartGetPayload<S['include'][P]>>  :
        P extends 'episodeHearts' ? Array < EpisodeHeartGetPayload<S['include'][P]>>  :
        P extends '_count' ? HeartCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (HeartArgs | HeartFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'user' ? UserGetPayload<S['select'][P]> :
        P extends 'channelHearts' ? Array < ChannelHeartGetPayload<S['select'][P]>>  :
        P extends 'episodeHearts' ? Array < EpisodeHeartGetPayload<S['select'][P]>>  :
        P extends '_count' ? HeartCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Heart ? Heart[P] : never
  } 
      : Heart


  type HeartCountArgs = 
    Omit<HeartFindManyArgs, 'select' | 'include'> & {
      select?: HeartCountAggregateInputType | true
    }

  export interface HeartDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one Heart that matches the filter.
     * @param {HeartFindUniqueArgs} args - Arguments to find a Heart
     * @example
     * // Get one Heart
     * const heart = await prisma.heart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HeartFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, HeartFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Heart'> extends True ? Prisma__HeartClient<HeartGetPayload<T>> : Prisma__HeartClient<HeartGetPayload<T> | null, null>

    /**
     * Find one Heart that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HeartFindUniqueOrThrowArgs} args - Arguments to find a Heart
     * @example
     * // Get one Heart
     * const heart = await prisma.heart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HeartFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, HeartFindUniqueOrThrowArgs>
    ): Prisma__HeartClient<HeartGetPayload<T>>

    /**
     * Find the first Heart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartFindFirstArgs} args - Arguments to find a Heart
     * @example
     * // Get one Heart
     * const heart = await prisma.heart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HeartFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, HeartFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Heart'> extends True ? Prisma__HeartClient<HeartGetPayload<T>> : Prisma__HeartClient<HeartGetPayload<T> | null, null>

    /**
     * Find the first Heart that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartFindFirstOrThrowArgs} args - Arguments to find a Heart
     * @example
     * // Get one Heart
     * const heart = await prisma.heart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HeartFindFirstOrThrowArgs>(
      args?: SelectSubset<T, HeartFindFirstOrThrowArgs>
    ): Prisma__HeartClient<HeartGetPayload<T>>

    /**
     * Find zero or more Hearts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Hearts
     * const hearts = await prisma.heart.findMany()
     * 
     * // Get first 10 Hearts
     * const hearts = await prisma.heart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const heartWithIdOnly = await prisma.heart.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends HeartFindManyArgs>(
      args?: SelectSubset<T, HeartFindManyArgs>
    ): Prisma.PrismaPromise<Array<HeartGetPayload<T>>>

    /**
     * Create a Heart.
     * @param {HeartCreateArgs} args - Arguments to create a Heart.
     * @example
     * // Create one Heart
     * const Heart = await prisma.heart.create({
     *   data: {
     *     // ... data to create a Heart
     *   }
     * })
     * 
    **/
    create<T extends HeartCreateArgs>(
      args: SelectSubset<T, HeartCreateArgs>
    ): Prisma__HeartClient<HeartGetPayload<T>>

    /**
     * Create many Hearts.
     *     @param {HeartCreateManyArgs} args - Arguments to create many Hearts.
     *     @example
     *     // Create many Hearts
     *     const heart = await prisma.heart.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HeartCreateManyArgs>(
      args?: SelectSubset<T, HeartCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Heart.
     * @param {HeartDeleteArgs} args - Arguments to delete one Heart.
     * @example
     * // Delete one Heart
     * const Heart = await prisma.heart.delete({
     *   where: {
     *     // ... filter to delete one Heart
     *   }
     * })
     * 
    **/
    delete<T extends HeartDeleteArgs>(
      args: SelectSubset<T, HeartDeleteArgs>
    ): Prisma__HeartClient<HeartGetPayload<T>>

    /**
     * Update one Heart.
     * @param {HeartUpdateArgs} args - Arguments to update one Heart.
     * @example
     * // Update one Heart
     * const heart = await prisma.heart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HeartUpdateArgs>(
      args: SelectSubset<T, HeartUpdateArgs>
    ): Prisma__HeartClient<HeartGetPayload<T>>

    /**
     * Delete zero or more Hearts.
     * @param {HeartDeleteManyArgs} args - Arguments to filter Hearts to delete.
     * @example
     * // Delete a few Hearts
     * const { count } = await prisma.heart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HeartDeleteManyArgs>(
      args?: SelectSubset<T, HeartDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Hearts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Hearts
     * const heart = await prisma.heart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HeartUpdateManyArgs>(
      args: SelectSubset<T, HeartUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Heart.
     * @param {HeartUpsertArgs} args - Arguments to update or create a Heart.
     * @example
     * // Update or create a Heart
     * const heart = await prisma.heart.upsert({
     *   create: {
     *     // ... data to create a Heart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Heart we want to update
     *   }
     * })
    **/
    upsert<T extends HeartUpsertArgs>(
      args: SelectSubset<T, HeartUpsertArgs>
    ): Prisma__HeartClient<HeartGetPayload<T>>

    /**
     * Count the number of Hearts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartCountArgs} args - Arguments to filter Hearts to count.
     * @example
     * // Count the number of Hearts
     * const count = await prisma.heart.count({
     *   where: {
     *     // ... the filter for the Hearts we want to count
     *   }
     * })
    **/
    count<T extends HeartCountArgs>(
      args?: Subset<T, HeartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HeartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Heart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HeartAggregateArgs>(args: Subset<T, HeartAggregateArgs>): Prisma.PrismaPromise<GetHeartAggregateType<T>>

    /**
     * Group by Heart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HeartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HeartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HeartGroupByArgs['orderBy'] }
        : { orderBy?: HeartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HeartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHeartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Heart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__HeartClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs= {}>(args?: Subset<T, UserArgs>): Prisma__UserClient<UserGetPayload<T> | Null>;

    channelHearts<T extends Heart$channelHeartsArgs= {}>(args?: Subset<T, Heart$channelHeartsArgs>): Prisma.PrismaPromise<Array<ChannelHeartGetPayload<T>>| Null>;

    episodeHearts<T extends Heart$episodeHeartsArgs= {}>(args?: Subset<T, Heart$episodeHeartsArgs>): Prisma.PrismaPromise<Array<EpisodeHeartGetPayload<T>>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Heart base type for findUnique actions
   */
  export type HeartFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * Filter, which Heart to fetch.
     */
    where: HeartWhereUniqueInput
  }

  /**
   * Heart findUnique
   */
  export interface HeartFindUniqueArgs extends HeartFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Heart findUniqueOrThrow
   */
  export type HeartFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * Filter, which Heart to fetch.
     */
    where: HeartWhereUniqueInput
  }


  /**
   * Heart base type for findFirst actions
   */
  export type HeartFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * Filter, which Heart to fetch.
     */
    where?: HeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hearts to fetch.
     */
    orderBy?: Enumerable<HeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hearts.
     */
    cursor?: HeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hearts.
     */
    distinct?: Enumerable<HeartScalarFieldEnum>
  }

  /**
   * Heart findFirst
   */
  export interface HeartFindFirstArgs extends HeartFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Heart findFirstOrThrow
   */
  export type HeartFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * Filter, which Heart to fetch.
     */
    where?: HeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hearts to fetch.
     */
    orderBy?: Enumerable<HeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Hearts.
     */
    cursor?: HeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Hearts.
     */
    distinct?: Enumerable<HeartScalarFieldEnum>
  }


  /**
   * Heart findMany
   */
  export type HeartFindManyArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * Filter, which Hearts to fetch.
     */
    where?: HeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Hearts to fetch.
     */
    orderBy?: Enumerable<HeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Hearts.
     */
    cursor?: HeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Hearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Hearts.
     */
    skip?: number
    distinct?: Enumerable<HeartScalarFieldEnum>
  }


  /**
   * Heart create
   */
  export type HeartCreateArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * The data needed to create a Heart.
     */
    data: XOR<HeartCreateInput, HeartUncheckedCreateInput>
  }


  /**
   * Heart createMany
   */
  export type HeartCreateManyArgs = {
    /**
     * The data used to create many Hearts.
     */
    data: Enumerable<HeartCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Heart update
   */
  export type HeartUpdateArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * The data needed to update a Heart.
     */
    data: XOR<HeartUpdateInput, HeartUncheckedUpdateInput>
    /**
     * Choose, which Heart to update.
     */
    where: HeartWhereUniqueInput
  }


  /**
   * Heart updateMany
   */
  export type HeartUpdateManyArgs = {
    /**
     * The data used to update Hearts.
     */
    data: XOR<HeartUpdateManyMutationInput, HeartUncheckedUpdateManyInput>
    /**
     * Filter which Hearts to update
     */
    where?: HeartWhereInput
  }


  /**
   * Heart upsert
   */
  export type HeartUpsertArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * The filter to search for the Heart to update in case it exists.
     */
    where: HeartWhereUniqueInput
    /**
     * In case the Heart found by the `where` argument doesn't exist, create a new Heart with this data.
     */
    create: XOR<HeartCreateInput, HeartUncheckedCreateInput>
    /**
     * In case the Heart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HeartUpdateInput, HeartUncheckedUpdateInput>
  }


  /**
   * Heart delete
   */
  export type HeartDeleteArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
    /**
     * Filter which Heart to delete.
     */
    where: HeartWhereUniqueInput
  }


  /**
   * Heart deleteMany
   */
  export type HeartDeleteManyArgs = {
    /**
     * Filter which Hearts to delete
     */
    where?: HeartWhereInput
  }


  /**
   * Heart.channelHearts
   */
  export type Heart$channelHeartsArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    where?: ChannelHeartWhereInput
    orderBy?: Enumerable<ChannelHeartOrderByWithRelationInput>
    cursor?: ChannelHeartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ChannelHeartScalarFieldEnum>
  }


  /**
   * Heart.episodeHearts
   */
  export type Heart$episodeHeartsArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    where?: EpisodeHeartWhereInput
    orderBy?: Enumerable<EpisodeHeartOrderByWithRelationInput>
    cursor?: EpisodeHeartWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<EpisodeHeartScalarFieldEnum>
  }


  /**
   * Heart without action
   */
  export type HeartArgs = {
    /**
     * Select specific fields to fetch from the Heart
     */
    select?: HeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HeartInclude | null
  }



  /**
   * Model ChannelHeart
   */


  export type AggregateChannelHeart = {
    _count: ChannelHeartCountAggregateOutputType | null
    _min: ChannelHeartMinAggregateOutputType | null
    _max: ChannelHeartMaxAggregateOutputType | null
  }

  export type ChannelHeartMinAggregateOutputType = {
    id: string | null
    heartId: string | null
    channelId: string | null
  }

  export type ChannelHeartMaxAggregateOutputType = {
    id: string | null
    heartId: string | null
    channelId: string | null
  }

  export type ChannelHeartCountAggregateOutputType = {
    id: number
    heartId: number
    channelId: number
    _all: number
  }


  export type ChannelHeartMinAggregateInputType = {
    id?: true
    heartId?: true
    channelId?: true
  }

  export type ChannelHeartMaxAggregateInputType = {
    id?: true
    heartId?: true
    channelId?: true
  }

  export type ChannelHeartCountAggregateInputType = {
    id?: true
    heartId?: true
    channelId?: true
    _all?: true
  }

  export type ChannelHeartAggregateArgs = {
    /**
     * Filter which ChannelHeart to aggregate.
     */
    where?: ChannelHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelHearts to fetch.
     */
    orderBy?: Enumerable<ChannelHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ChannelHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelHearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ChannelHearts
    **/
    _count?: true | ChannelHeartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChannelHeartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChannelHeartMaxAggregateInputType
  }

  export type GetChannelHeartAggregateType<T extends ChannelHeartAggregateArgs> = {
        [P in keyof T & keyof AggregateChannelHeart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChannelHeart[P]>
      : GetScalarType<T[P], AggregateChannelHeart[P]>
  }




  export type ChannelHeartGroupByArgs = {
    where?: ChannelHeartWhereInput
    orderBy?: Enumerable<ChannelHeartOrderByWithAggregationInput>
    by: ChannelHeartScalarFieldEnum[]
    having?: ChannelHeartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChannelHeartCountAggregateInputType | true
    _min?: ChannelHeartMinAggregateInputType
    _max?: ChannelHeartMaxAggregateInputType
  }


  export type ChannelHeartGroupByOutputType = {
    id: string
    heartId: string
    channelId: string
    _count: ChannelHeartCountAggregateOutputType | null
    _min: ChannelHeartMinAggregateOutputType | null
    _max: ChannelHeartMaxAggregateOutputType | null
  }

  type GetChannelHeartGroupByPayload<T extends ChannelHeartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ChannelHeartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChannelHeartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChannelHeartGroupByOutputType[P]>
            : GetScalarType<T[P], ChannelHeartGroupByOutputType[P]>
        }
      >
    >


  export type ChannelHeartSelect = {
    id?: boolean
    heartId?: boolean
    channelId?: boolean
    heart?: boolean | HeartArgs
    channel?: boolean | ChannelArgs
  }


  export type ChannelHeartInclude = {
    heart?: boolean | HeartArgs
    channel?: boolean | ChannelArgs
  }

  export type ChannelHeartGetPayload<S extends boolean | null | undefined | ChannelHeartArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? ChannelHeart :
    S extends undefined ? never :
    S extends { include: any } & (ChannelHeartArgs | ChannelHeartFindManyArgs)
    ? ChannelHeart  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'heart' ? HeartGetPayload<S['include'][P]> :
        P extends 'channel' ? ChannelGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (ChannelHeartArgs | ChannelHeartFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'heart' ? HeartGetPayload<S['select'][P]> :
        P extends 'channel' ? ChannelGetPayload<S['select'][P]> :  P extends keyof ChannelHeart ? ChannelHeart[P] : never
  } 
      : ChannelHeart


  type ChannelHeartCountArgs = 
    Omit<ChannelHeartFindManyArgs, 'select' | 'include'> & {
      select?: ChannelHeartCountAggregateInputType | true
    }

  export interface ChannelHeartDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one ChannelHeart that matches the filter.
     * @param {ChannelHeartFindUniqueArgs} args - Arguments to find a ChannelHeart
     * @example
     * // Get one ChannelHeart
     * const channelHeart = await prisma.channelHeart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ChannelHeartFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ChannelHeartFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ChannelHeart'> extends True ? Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>> : Prisma__ChannelHeartClient<ChannelHeartGetPayload<T> | null, null>

    /**
     * Find one ChannelHeart that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ChannelHeartFindUniqueOrThrowArgs} args - Arguments to find a ChannelHeart
     * @example
     * // Get one ChannelHeart
     * const channelHeart = await prisma.channelHeart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ChannelHeartFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, ChannelHeartFindUniqueOrThrowArgs>
    ): Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>>

    /**
     * Find the first ChannelHeart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelHeartFindFirstArgs} args - Arguments to find a ChannelHeart
     * @example
     * // Get one ChannelHeart
     * const channelHeart = await prisma.channelHeart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ChannelHeartFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ChannelHeartFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ChannelHeart'> extends True ? Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>> : Prisma__ChannelHeartClient<ChannelHeartGetPayload<T> | null, null>

    /**
     * Find the first ChannelHeart that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelHeartFindFirstOrThrowArgs} args - Arguments to find a ChannelHeart
     * @example
     * // Get one ChannelHeart
     * const channelHeart = await prisma.channelHeart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ChannelHeartFindFirstOrThrowArgs>(
      args?: SelectSubset<T, ChannelHeartFindFirstOrThrowArgs>
    ): Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>>

    /**
     * Find zero or more ChannelHearts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelHeartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChannelHearts
     * const channelHearts = await prisma.channelHeart.findMany()
     * 
     * // Get first 10 ChannelHearts
     * const channelHearts = await prisma.channelHeart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const channelHeartWithIdOnly = await prisma.channelHeart.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ChannelHeartFindManyArgs>(
      args?: SelectSubset<T, ChannelHeartFindManyArgs>
    ): Prisma.PrismaPromise<Array<ChannelHeartGetPayload<T>>>

    /**
     * Create a ChannelHeart.
     * @param {ChannelHeartCreateArgs} args - Arguments to create a ChannelHeart.
     * @example
     * // Create one ChannelHeart
     * const ChannelHeart = await prisma.channelHeart.create({
     *   data: {
     *     // ... data to create a ChannelHeart
     *   }
     * })
     * 
    **/
    create<T extends ChannelHeartCreateArgs>(
      args: SelectSubset<T, ChannelHeartCreateArgs>
    ): Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>>

    /**
     * Create many ChannelHearts.
     *     @param {ChannelHeartCreateManyArgs} args - Arguments to create many ChannelHearts.
     *     @example
     *     // Create many ChannelHearts
     *     const channelHeart = await prisma.channelHeart.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ChannelHeartCreateManyArgs>(
      args?: SelectSubset<T, ChannelHeartCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChannelHeart.
     * @param {ChannelHeartDeleteArgs} args - Arguments to delete one ChannelHeart.
     * @example
     * // Delete one ChannelHeart
     * const ChannelHeart = await prisma.channelHeart.delete({
     *   where: {
     *     // ... filter to delete one ChannelHeart
     *   }
     * })
     * 
    **/
    delete<T extends ChannelHeartDeleteArgs>(
      args: SelectSubset<T, ChannelHeartDeleteArgs>
    ): Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>>

    /**
     * Update one ChannelHeart.
     * @param {ChannelHeartUpdateArgs} args - Arguments to update one ChannelHeart.
     * @example
     * // Update one ChannelHeart
     * const channelHeart = await prisma.channelHeart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ChannelHeartUpdateArgs>(
      args: SelectSubset<T, ChannelHeartUpdateArgs>
    ): Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>>

    /**
     * Delete zero or more ChannelHearts.
     * @param {ChannelHeartDeleteManyArgs} args - Arguments to filter ChannelHearts to delete.
     * @example
     * // Delete a few ChannelHearts
     * const { count } = await prisma.channelHeart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ChannelHeartDeleteManyArgs>(
      args?: SelectSubset<T, ChannelHeartDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChannelHearts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelHeartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChannelHearts
     * const channelHeart = await prisma.channelHeart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ChannelHeartUpdateManyArgs>(
      args: SelectSubset<T, ChannelHeartUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChannelHeart.
     * @param {ChannelHeartUpsertArgs} args - Arguments to update or create a ChannelHeart.
     * @example
     * // Update or create a ChannelHeart
     * const channelHeart = await prisma.channelHeart.upsert({
     *   create: {
     *     // ... data to create a ChannelHeart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChannelHeart we want to update
     *   }
     * })
    **/
    upsert<T extends ChannelHeartUpsertArgs>(
      args: SelectSubset<T, ChannelHeartUpsertArgs>
    ): Prisma__ChannelHeartClient<ChannelHeartGetPayload<T>>

    /**
     * Count the number of ChannelHearts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelHeartCountArgs} args - Arguments to filter ChannelHearts to count.
     * @example
     * // Count the number of ChannelHearts
     * const count = await prisma.channelHeart.count({
     *   where: {
     *     // ... the filter for the ChannelHearts we want to count
     *   }
     * })
    **/
    count<T extends ChannelHeartCountArgs>(
      args?: Subset<T, ChannelHeartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChannelHeartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChannelHeart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelHeartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChannelHeartAggregateArgs>(args: Subset<T, ChannelHeartAggregateArgs>): Prisma.PrismaPromise<GetChannelHeartAggregateType<T>>

    /**
     * Group by ChannelHeart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChannelHeartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ChannelHeartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ChannelHeartGroupByArgs['orderBy'] }
        : { orderBy?: ChannelHeartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ChannelHeartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChannelHeartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ChannelHeart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ChannelHeartClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    heart<T extends HeartArgs= {}>(args?: Subset<T, HeartArgs>): Prisma__HeartClient<HeartGetPayload<T> | Null>;

    channel<T extends ChannelArgs= {}>(args?: Subset<T, ChannelArgs>): Prisma__ChannelClient<ChannelGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ChannelHeart base type for findUnique actions
   */
  export type ChannelHeartFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * Filter, which ChannelHeart to fetch.
     */
    where: ChannelHeartWhereUniqueInput
  }

  /**
   * ChannelHeart findUnique
   */
  export interface ChannelHeartFindUniqueArgs extends ChannelHeartFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChannelHeart findUniqueOrThrow
   */
  export type ChannelHeartFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * Filter, which ChannelHeart to fetch.
     */
    where: ChannelHeartWhereUniqueInput
  }


  /**
   * ChannelHeart base type for findFirst actions
   */
  export type ChannelHeartFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * Filter, which ChannelHeart to fetch.
     */
    where?: ChannelHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelHearts to fetch.
     */
    orderBy?: Enumerable<ChannelHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelHearts.
     */
    cursor?: ChannelHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelHearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelHearts.
     */
    distinct?: Enumerable<ChannelHeartScalarFieldEnum>
  }

  /**
   * ChannelHeart findFirst
   */
  export interface ChannelHeartFindFirstArgs extends ChannelHeartFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ChannelHeart findFirstOrThrow
   */
  export type ChannelHeartFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * Filter, which ChannelHeart to fetch.
     */
    where?: ChannelHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelHearts to fetch.
     */
    orderBy?: Enumerable<ChannelHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ChannelHearts.
     */
    cursor?: ChannelHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelHearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ChannelHearts.
     */
    distinct?: Enumerable<ChannelHeartScalarFieldEnum>
  }


  /**
   * ChannelHeart findMany
   */
  export type ChannelHeartFindManyArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * Filter, which ChannelHearts to fetch.
     */
    where?: ChannelHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ChannelHearts to fetch.
     */
    orderBy?: Enumerable<ChannelHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ChannelHearts.
     */
    cursor?: ChannelHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ChannelHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ChannelHearts.
     */
    skip?: number
    distinct?: Enumerable<ChannelHeartScalarFieldEnum>
  }


  /**
   * ChannelHeart create
   */
  export type ChannelHeartCreateArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * The data needed to create a ChannelHeart.
     */
    data: XOR<ChannelHeartCreateInput, ChannelHeartUncheckedCreateInput>
  }


  /**
   * ChannelHeart createMany
   */
  export type ChannelHeartCreateManyArgs = {
    /**
     * The data used to create many ChannelHearts.
     */
    data: Enumerable<ChannelHeartCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ChannelHeart update
   */
  export type ChannelHeartUpdateArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * The data needed to update a ChannelHeart.
     */
    data: XOR<ChannelHeartUpdateInput, ChannelHeartUncheckedUpdateInput>
    /**
     * Choose, which ChannelHeart to update.
     */
    where: ChannelHeartWhereUniqueInput
  }


  /**
   * ChannelHeart updateMany
   */
  export type ChannelHeartUpdateManyArgs = {
    /**
     * The data used to update ChannelHearts.
     */
    data: XOR<ChannelHeartUpdateManyMutationInput, ChannelHeartUncheckedUpdateManyInput>
    /**
     * Filter which ChannelHearts to update
     */
    where?: ChannelHeartWhereInput
  }


  /**
   * ChannelHeart upsert
   */
  export type ChannelHeartUpsertArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * The filter to search for the ChannelHeart to update in case it exists.
     */
    where: ChannelHeartWhereUniqueInput
    /**
     * In case the ChannelHeart found by the `where` argument doesn't exist, create a new ChannelHeart with this data.
     */
    create: XOR<ChannelHeartCreateInput, ChannelHeartUncheckedCreateInput>
    /**
     * In case the ChannelHeart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ChannelHeartUpdateInput, ChannelHeartUncheckedUpdateInput>
  }


  /**
   * ChannelHeart delete
   */
  export type ChannelHeartDeleteArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
    /**
     * Filter which ChannelHeart to delete.
     */
    where: ChannelHeartWhereUniqueInput
  }


  /**
   * ChannelHeart deleteMany
   */
  export type ChannelHeartDeleteManyArgs = {
    /**
     * Filter which ChannelHearts to delete
     */
    where?: ChannelHeartWhereInput
  }


  /**
   * ChannelHeart without action
   */
  export type ChannelHeartArgs = {
    /**
     * Select specific fields to fetch from the ChannelHeart
     */
    select?: ChannelHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ChannelHeartInclude | null
  }



  /**
   * Model EpisodeHeart
   */


  export type AggregateEpisodeHeart = {
    _count: EpisodeHeartCountAggregateOutputType | null
    _min: EpisodeHeartMinAggregateOutputType | null
    _max: EpisodeHeartMaxAggregateOutputType | null
  }

  export type EpisodeHeartMinAggregateOutputType = {
    id: string | null
    heartId: string | null
    episodeId: string | null
  }

  export type EpisodeHeartMaxAggregateOutputType = {
    id: string | null
    heartId: string | null
    episodeId: string | null
  }

  export type EpisodeHeartCountAggregateOutputType = {
    id: number
    heartId: number
    episodeId: number
    _all: number
  }


  export type EpisodeHeartMinAggregateInputType = {
    id?: true
    heartId?: true
    episodeId?: true
  }

  export type EpisodeHeartMaxAggregateInputType = {
    id?: true
    heartId?: true
    episodeId?: true
  }

  export type EpisodeHeartCountAggregateInputType = {
    id?: true
    heartId?: true
    episodeId?: true
    _all?: true
  }

  export type EpisodeHeartAggregateArgs = {
    /**
     * Filter which EpisodeHeart to aggregate.
     */
    where?: EpisodeHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodeHearts to fetch.
     */
    orderBy?: Enumerable<EpisodeHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EpisodeHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodeHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodeHearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned EpisodeHearts
    **/
    _count?: true | EpisodeHeartCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EpisodeHeartMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EpisodeHeartMaxAggregateInputType
  }

  export type GetEpisodeHeartAggregateType<T extends EpisodeHeartAggregateArgs> = {
        [P in keyof T & keyof AggregateEpisodeHeart]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEpisodeHeart[P]>
      : GetScalarType<T[P], AggregateEpisodeHeart[P]>
  }




  export type EpisodeHeartGroupByArgs = {
    where?: EpisodeHeartWhereInput
    orderBy?: Enumerable<EpisodeHeartOrderByWithAggregationInput>
    by: EpisodeHeartScalarFieldEnum[]
    having?: EpisodeHeartScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EpisodeHeartCountAggregateInputType | true
    _min?: EpisodeHeartMinAggregateInputType
    _max?: EpisodeHeartMaxAggregateInputType
  }


  export type EpisodeHeartGroupByOutputType = {
    id: string
    heartId: string
    episodeId: string
    _count: EpisodeHeartCountAggregateOutputType | null
    _min: EpisodeHeartMinAggregateOutputType | null
    _max: EpisodeHeartMaxAggregateOutputType | null
  }

  type GetEpisodeHeartGroupByPayload<T extends EpisodeHeartGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<EpisodeHeartGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EpisodeHeartGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EpisodeHeartGroupByOutputType[P]>
            : GetScalarType<T[P], EpisodeHeartGroupByOutputType[P]>
        }
      >
    >


  export type EpisodeHeartSelect = {
    id?: boolean
    heartId?: boolean
    episodeId?: boolean
    heart?: boolean | HeartArgs
    episode?: boolean | EpisodeArgs
  }


  export type EpisodeHeartInclude = {
    heart?: boolean | HeartArgs
    episode?: boolean | EpisodeArgs
  }

  export type EpisodeHeartGetPayload<S extends boolean | null | undefined | EpisodeHeartArgs> =
    S extends { select: any, include: any } ? 'Please either choose `select` or `include`' :
    S extends true ? EpisodeHeart :
    S extends undefined ? never :
    S extends { include: any } & (EpisodeHeartArgs | EpisodeHeartFindManyArgs)
    ? EpisodeHeart  & {
    [P in TruthyKeys<S['include']>]:
        P extends 'heart' ? HeartGetPayload<S['include'][P]> :
        P extends 'episode' ? EpisodeGetPayload<S['include'][P]> :  never
  } 
    : S extends { select: any } & (EpisodeHeartArgs | EpisodeHeartFindManyArgs)
      ? {
    [P in TruthyKeys<S['select']>]:
        P extends 'heart' ? HeartGetPayload<S['select'][P]> :
        P extends 'episode' ? EpisodeGetPayload<S['select'][P]> :  P extends keyof EpisodeHeart ? EpisodeHeart[P] : never
  } 
      : EpisodeHeart


  type EpisodeHeartCountArgs = 
    Omit<EpisodeHeartFindManyArgs, 'select' | 'include'> & {
      select?: EpisodeHeartCountAggregateInputType | true
    }

  export interface EpisodeHeartDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined> {

    /**
     * Find zero or one EpisodeHeart that matches the filter.
     * @param {EpisodeHeartFindUniqueArgs} args - Arguments to find a EpisodeHeart
     * @example
     * // Get one EpisodeHeart
     * const episodeHeart = await prisma.episodeHeart.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EpisodeHeartFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, EpisodeHeartFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'EpisodeHeart'> extends True ? Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>> : Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T> | null, null>

    /**
     * Find one EpisodeHeart that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EpisodeHeartFindUniqueOrThrowArgs} args - Arguments to find a EpisodeHeart
     * @example
     * // Get one EpisodeHeart
     * const episodeHeart = await prisma.episodeHeart.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EpisodeHeartFindUniqueOrThrowArgs>(
      args?: SelectSubset<T, EpisodeHeartFindUniqueOrThrowArgs>
    ): Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>>

    /**
     * Find the first EpisodeHeart that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeHeartFindFirstArgs} args - Arguments to find a EpisodeHeart
     * @example
     * // Get one EpisodeHeart
     * const episodeHeart = await prisma.episodeHeart.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EpisodeHeartFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, EpisodeHeartFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'EpisodeHeart'> extends True ? Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>> : Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T> | null, null>

    /**
     * Find the first EpisodeHeart that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeHeartFindFirstOrThrowArgs} args - Arguments to find a EpisodeHeart
     * @example
     * // Get one EpisodeHeart
     * const episodeHeart = await prisma.episodeHeart.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EpisodeHeartFindFirstOrThrowArgs>(
      args?: SelectSubset<T, EpisodeHeartFindFirstOrThrowArgs>
    ): Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>>

    /**
     * Find zero or more EpisodeHearts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeHeartFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all EpisodeHearts
     * const episodeHearts = await prisma.episodeHeart.findMany()
     * 
     * // Get first 10 EpisodeHearts
     * const episodeHearts = await prisma.episodeHeart.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const episodeHeartWithIdOnly = await prisma.episodeHeart.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends EpisodeHeartFindManyArgs>(
      args?: SelectSubset<T, EpisodeHeartFindManyArgs>
    ): Prisma.PrismaPromise<Array<EpisodeHeartGetPayload<T>>>

    /**
     * Create a EpisodeHeart.
     * @param {EpisodeHeartCreateArgs} args - Arguments to create a EpisodeHeart.
     * @example
     * // Create one EpisodeHeart
     * const EpisodeHeart = await prisma.episodeHeart.create({
     *   data: {
     *     // ... data to create a EpisodeHeart
     *   }
     * })
     * 
    **/
    create<T extends EpisodeHeartCreateArgs>(
      args: SelectSubset<T, EpisodeHeartCreateArgs>
    ): Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>>

    /**
     * Create many EpisodeHearts.
     *     @param {EpisodeHeartCreateManyArgs} args - Arguments to create many EpisodeHearts.
     *     @example
     *     // Create many EpisodeHearts
     *     const episodeHeart = await prisma.episodeHeart.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EpisodeHeartCreateManyArgs>(
      args?: SelectSubset<T, EpisodeHeartCreateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a EpisodeHeart.
     * @param {EpisodeHeartDeleteArgs} args - Arguments to delete one EpisodeHeart.
     * @example
     * // Delete one EpisodeHeart
     * const EpisodeHeart = await prisma.episodeHeart.delete({
     *   where: {
     *     // ... filter to delete one EpisodeHeart
     *   }
     * })
     * 
    **/
    delete<T extends EpisodeHeartDeleteArgs>(
      args: SelectSubset<T, EpisodeHeartDeleteArgs>
    ): Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>>

    /**
     * Update one EpisodeHeart.
     * @param {EpisodeHeartUpdateArgs} args - Arguments to update one EpisodeHeart.
     * @example
     * // Update one EpisodeHeart
     * const episodeHeart = await prisma.episodeHeart.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EpisodeHeartUpdateArgs>(
      args: SelectSubset<T, EpisodeHeartUpdateArgs>
    ): Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>>

    /**
     * Delete zero or more EpisodeHearts.
     * @param {EpisodeHeartDeleteManyArgs} args - Arguments to filter EpisodeHearts to delete.
     * @example
     * // Delete a few EpisodeHearts
     * const { count } = await prisma.episodeHeart.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EpisodeHeartDeleteManyArgs>(
      args?: SelectSubset<T, EpisodeHeartDeleteManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more EpisodeHearts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeHeartUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many EpisodeHearts
     * const episodeHeart = await prisma.episodeHeart.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EpisodeHeartUpdateManyArgs>(
      args: SelectSubset<T, EpisodeHeartUpdateManyArgs>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one EpisodeHeart.
     * @param {EpisodeHeartUpsertArgs} args - Arguments to update or create a EpisodeHeart.
     * @example
     * // Update or create a EpisodeHeart
     * const episodeHeart = await prisma.episodeHeart.upsert({
     *   create: {
     *     // ... data to create a EpisodeHeart
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the EpisodeHeart we want to update
     *   }
     * })
    **/
    upsert<T extends EpisodeHeartUpsertArgs>(
      args: SelectSubset<T, EpisodeHeartUpsertArgs>
    ): Prisma__EpisodeHeartClient<EpisodeHeartGetPayload<T>>

    /**
     * Count the number of EpisodeHearts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeHeartCountArgs} args - Arguments to filter EpisodeHearts to count.
     * @example
     * // Count the number of EpisodeHearts
     * const count = await prisma.episodeHeart.count({
     *   where: {
     *     // ... the filter for the EpisodeHearts we want to count
     *   }
     * })
    **/
    count<T extends EpisodeHeartCountArgs>(
      args?: Subset<T, EpisodeHeartCountArgs>,
    ): Prisma.PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EpisodeHeartCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a EpisodeHeart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeHeartAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EpisodeHeartAggregateArgs>(args: Subset<T, EpisodeHeartAggregateArgs>): Prisma.PrismaPromise<GetEpisodeHeartAggregateType<T>>

    /**
     * Group by EpisodeHeart.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EpisodeHeartGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EpisodeHeartGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EpisodeHeartGroupByArgs['orderBy'] }
        : { orderBy?: EpisodeHeartGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EpisodeHeartGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEpisodeHeartGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for EpisodeHeart.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__EpisodeHeartClient<T, Null = never> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    heart<T extends HeartArgs= {}>(args?: Subset<T, HeartArgs>): Prisma__HeartClient<HeartGetPayload<T> | Null>;

    episode<T extends EpisodeArgs= {}>(args?: Subset<T, EpisodeArgs>): Prisma__EpisodeClient<EpisodeGetPayload<T> | Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * EpisodeHeart base type for findUnique actions
   */
  export type EpisodeHeartFindUniqueArgsBase = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * Filter, which EpisodeHeart to fetch.
     */
    where: EpisodeHeartWhereUniqueInput
  }

  /**
   * EpisodeHeart findUnique
   */
  export interface EpisodeHeartFindUniqueArgs extends EpisodeHeartFindUniqueArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EpisodeHeart findUniqueOrThrow
   */
  export type EpisodeHeartFindUniqueOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * Filter, which EpisodeHeart to fetch.
     */
    where: EpisodeHeartWhereUniqueInput
  }


  /**
   * EpisodeHeart base type for findFirst actions
   */
  export type EpisodeHeartFindFirstArgsBase = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * Filter, which EpisodeHeart to fetch.
     */
    where?: EpisodeHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodeHearts to fetch.
     */
    orderBy?: Enumerable<EpisodeHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EpisodeHearts.
     */
    cursor?: EpisodeHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodeHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodeHearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EpisodeHearts.
     */
    distinct?: Enumerable<EpisodeHeartScalarFieldEnum>
  }

  /**
   * EpisodeHeart findFirst
   */
  export interface EpisodeHeartFindFirstArgs extends EpisodeHeartFindFirstArgsBase {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * EpisodeHeart findFirstOrThrow
   */
  export type EpisodeHeartFindFirstOrThrowArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * Filter, which EpisodeHeart to fetch.
     */
    where?: EpisodeHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodeHearts to fetch.
     */
    orderBy?: Enumerable<EpisodeHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for EpisodeHearts.
     */
    cursor?: EpisodeHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodeHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodeHearts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of EpisodeHearts.
     */
    distinct?: Enumerable<EpisodeHeartScalarFieldEnum>
  }


  /**
   * EpisodeHeart findMany
   */
  export type EpisodeHeartFindManyArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * Filter, which EpisodeHearts to fetch.
     */
    where?: EpisodeHeartWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of EpisodeHearts to fetch.
     */
    orderBy?: Enumerable<EpisodeHeartOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing EpisodeHearts.
     */
    cursor?: EpisodeHeartWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` EpisodeHearts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` EpisodeHearts.
     */
    skip?: number
    distinct?: Enumerable<EpisodeHeartScalarFieldEnum>
  }


  /**
   * EpisodeHeart create
   */
  export type EpisodeHeartCreateArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * The data needed to create a EpisodeHeart.
     */
    data: XOR<EpisodeHeartCreateInput, EpisodeHeartUncheckedCreateInput>
  }


  /**
   * EpisodeHeart createMany
   */
  export type EpisodeHeartCreateManyArgs = {
    /**
     * The data used to create many EpisodeHearts.
     */
    data: Enumerable<EpisodeHeartCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * EpisodeHeart update
   */
  export type EpisodeHeartUpdateArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * The data needed to update a EpisodeHeart.
     */
    data: XOR<EpisodeHeartUpdateInput, EpisodeHeartUncheckedUpdateInput>
    /**
     * Choose, which EpisodeHeart to update.
     */
    where: EpisodeHeartWhereUniqueInput
  }


  /**
   * EpisodeHeart updateMany
   */
  export type EpisodeHeartUpdateManyArgs = {
    /**
     * The data used to update EpisodeHearts.
     */
    data: XOR<EpisodeHeartUpdateManyMutationInput, EpisodeHeartUncheckedUpdateManyInput>
    /**
     * Filter which EpisodeHearts to update
     */
    where?: EpisodeHeartWhereInput
  }


  /**
   * EpisodeHeart upsert
   */
  export type EpisodeHeartUpsertArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * The filter to search for the EpisodeHeart to update in case it exists.
     */
    where: EpisodeHeartWhereUniqueInput
    /**
     * In case the EpisodeHeart found by the `where` argument doesn't exist, create a new EpisodeHeart with this data.
     */
    create: XOR<EpisodeHeartCreateInput, EpisodeHeartUncheckedCreateInput>
    /**
     * In case the EpisodeHeart was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EpisodeHeartUpdateInput, EpisodeHeartUncheckedUpdateInput>
  }


  /**
   * EpisodeHeart delete
   */
  export type EpisodeHeartDeleteArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
    /**
     * Filter which EpisodeHeart to delete.
     */
    where: EpisodeHeartWhereUniqueInput
  }


  /**
   * EpisodeHeart deleteMany
   */
  export type EpisodeHeartDeleteManyArgs = {
    /**
     * Filter which EpisodeHearts to delete
     */
    where?: EpisodeHeartWhereInput
  }


  /**
   * EpisodeHeart without action
   */
  export type EpisodeHeartArgs = {
    /**
     * Select specific fields to fetch from the EpisodeHeart
     */
    select?: EpisodeHeartSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EpisodeHeartInclude | null
  }



  /**
   * Enums
   */

  export const ChannelHeartScalarFieldEnum: {
    id: 'id',
    heartId: 'heartId',
    channelId: 'channelId'
  };

  export type ChannelHeartScalarFieldEnum = (typeof ChannelHeartScalarFieldEnum)[keyof typeof ChannelHeartScalarFieldEnum]


  export const ChannelScalarFieldEnum: {
    id: 'id',
    title: 'title',
    publisher: 'publisher',
    thumbnail: 'thumbnail'
  };

  export type ChannelScalarFieldEnum = (typeof ChannelScalarFieldEnum)[keyof typeof ChannelScalarFieldEnum]


  export const EpisodeHeartScalarFieldEnum: {
    id: 'id',
    heartId: 'heartId',
    episodeId: 'episodeId'
  };

  export type EpisodeHeartScalarFieldEnum = (typeof EpisodeHeartScalarFieldEnum)[keyof typeof EpisodeHeartScalarFieldEnum]


  export const EpisodeScalarFieldEnum: {
    id: 'id',
    title: 'title',
    thumbnail: 'thumbnail',
    channelId: 'channelId'
  };

  export type EpisodeScalarFieldEnum = (typeof EpisodeScalarFieldEnum)[keyof typeof EpisodeScalarFieldEnum]


  export const GenreScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type GenreScalarFieldEnum = (typeof GenreScalarFieldEnum)[keyof typeof GenreScalarFieldEnum]


  export const GenresOnChannelsScalarFieldEnum: {
    channelId: 'channelId',
    genreId: 'genreId'
  };

  export type GenresOnChannelsScalarFieldEnum = (typeof GenresOnChannelsScalarFieldEnum)[keyof typeof GenresOnChannelsScalarFieldEnum]


  export const HeartScalarFieldEnum: {
    id: 'id',
    userId: 'userId'
  };

  export type HeartScalarFieldEnum = (typeof HeartScalarFieldEnum)[keyof typeof HeartScalarFieldEnum]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: StringFilter | string
    name?: StringNullableFilter | string | null
    email?: StringNullableFilter | string | null
    emailVerified?: DateTimeNullableFilter | Date | string | null
    image?: StringNullableFilter | string | null
    hearts?: HeartListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    hearts?: HeartOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    email?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    name?: StringNullableWithAggregatesFilter | string | null
    email?: StringNullableWithAggregatesFilter | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter | Date | string | null
    image?: StringNullableWithAggregatesFilter | string | null
  }

  export type GenreWhereInput = {
    AND?: Enumerable<GenreWhereInput>
    OR?: Enumerable<GenreWhereInput>
    NOT?: Enumerable<GenreWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    channels?: GenresOnChannelsListRelationFilter
  }

  export type GenreOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    channels?: GenresOnChannelsOrderByRelationAggregateInput
  }

  export type GenreWhereUniqueInput = {
    id?: number
  }

  export type GenreOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: GenreCountOrderByAggregateInput
    _avg?: GenreAvgOrderByAggregateInput
    _max?: GenreMaxOrderByAggregateInput
    _min?: GenreMinOrderByAggregateInput
    _sum?: GenreSumOrderByAggregateInput
  }

  export type GenreScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GenreScalarWhereWithAggregatesInput>
    OR?: Enumerable<GenreScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GenreScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
  }

  export type ChannelWhereInput = {
    AND?: Enumerable<ChannelWhereInput>
    OR?: Enumerable<ChannelWhereInput>
    NOT?: Enumerable<ChannelWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    publisher?: StringFilter | string
    thumbnail?: StringFilter | string
    genres?: GenresOnChannelsListRelationFilter
    episodes?: EpisodeListRelationFilter
    channelHearts?: ChannelHeartListRelationFilter
  }

  export type ChannelOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    thumbnail?: SortOrder
    genres?: GenresOnChannelsOrderByRelationAggregateInput
    episodes?: EpisodeOrderByRelationAggregateInput
    channelHearts?: ChannelHeartOrderByRelationAggregateInput
  }

  export type ChannelWhereUniqueInput = {
    id?: string
  }

  export type ChannelOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    thumbnail?: SortOrder
    _count?: ChannelCountOrderByAggregateInput
    _max?: ChannelMaxOrderByAggregateInput
    _min?: ChannelMinOrderByAggregateInput
  }

  export type ChannelScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChannelScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    publisher?: StringWithAggregatesFilter | string
    thumbnail?: StringWithAggregatesFilter | string
  }

  export type GenresOnChannelsWhereInput = {
    AND?: Enumerable<GenresOnChannelsWhereInput>
    OR?: Enumerable<GenresOnChannelsWhereInput>
    NOT?: Enumerable<GenresOnChannelsWhereInput>
    channelId?: StringFilter | string
    genreId?: IntFilter | number
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    genre?: XOR<GenreRelationFilter, GenreWhereInput>
  }

  export type GenresOnChannelsOrderByWithRelationInput = {
    channelId?: SortOrder
    genreId?: SortOrder
    channel?: ChannelOrderByWithRelationInput
    genre?: GenreOrderByWithRelationInput
  }

  export type GenresOnChannelsWhereUniqueInput = {
    channelId_genreId?: GenresOnChannelsChannelIdGenreIdCompoundUniqueInput
  }

  export type GenresOnChannelsOrderByWithAggregationInput = {
    channelId?: SortOrder
    genreId?: SortOrder
    _count?: GenresOnChannelsCountOrderByAggregateInput
    _avg?: GenresOnChannelsAvgOrderByAggregateInput
    _max?: GenresOnChannelsMaxOrderByAggregateInput
    _min?: GenresOnChannelsMinOrderByAggregateInput
    _sum?: GenresOnChannelsSumOrderByAggregateInput
  }

  export type GenresOnChannelsScalarWhereWithAggregatesInput = {
    AND?: Enumerable<GenresOnChannelsScalarWhereWithAggregatesInput>
    OR?: Enumerable<GenresOnChannelsScalarWhereWithAggregatesInput>
    NOT?: Enumerable<GenresOnChannelsScalarWhereWithAggregatesInput>
    channelId?: StringWithAggregatesFilter | string
    genreId?: IntWithAggregatesFilter | number
  }

  export type EpisodeWhereInput = {
    AND?: Enumerable<EpisodeWhereInput>
    OR?: Enumerable<EpisodeWhereInput>
    NOT?: Enumerable<EpisodeWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    thumbnail?: StringFilter | string
    channelId?: StringFilter | string
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
    episodeHearts?: EpisodeHeartListRelationFilter
  }

  export type EpisodeOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    channelId?: SortOrder
    channel?: ChannelOrderByWithRelationInput
    episodeHearts?: EpisodeHeartOrderByRelationAggregateInput
  }

  export type EpisodeWhereUniqueInput = {
    id?: string
  }

  export type EpisodeOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    channelId?: SortOrder
    _count?: EpisodeCountOrderByAggregateInput
    _max?: EpisodeMaxOrderByAggregateInput
    _min?: EpisodeMinOrderByAggregateInput
  }

  export type EpisodeScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EpisodeScalarWhereWithAggregatesInput>
    OR?: Enumerable<EpisodeScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EpisodeScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    title?: StringWithAggregatesFilter | string
    thumbnail?: StringWithAggregatesFilter | string
    channelId?: StringWithAggregatesFilter | string
  }

  export type HeartWhereInput = {
    AND?: Enumerable<HeartWhereInput>
    OR?: Enumerable<HeartWhereInput>
    NOT?: Enumerable<HeartWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    channelHearts?: ChannelHeartListRelationFilter
    episodeHearts?: EpisodeHeartListRelationFilter
  }

  export type HeartOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    channelHearts?: ChannelHeartOrderByRelationAggregateInput
    episodeHearts?: EpisodeHeartOrderByRelationAggregateInput
  }

  export type HeartWhereUniqueInput = {
    id?: string
  }

  export type HeartOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    _count?: HeartCountOrderByAggregateInput
    _max?: HeartMaxOrderByAggregateInput
    _min?: HeartMinOrderByAggregateInput
  }

  export type HeartScalarWhereWithAggregatesInput = {
    AND?: Enumerable<HeartScalarWhereWithAggregatesInput>
    OR?: Enumerable<HeartScalarWhereWithAggregatesInput>
    NOT?: Enumerable<HeartScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    userId?: StringWithAggregatesFilter | string
  }

  export type ChannelHeartWhereInput = {
    AND?: Enumerable<ChannelHeartWhereInput>
    OR?: Enumerable<ChannelHeartWhereInput>
    NOT?: Enumerable<ChannelHeartWhereInput>
    id?: StringFilter | string
    heartId?: StringFilter | string
    channelId?: StringFilter | string
    heart?: XOR<HeartRelationFilter, HeartWhereInput>
    channel?: XOR<ChannelRelationFilter, ChannelWhereInput>
  }

  export type ChannelHeartOrderByWithRelationInput = {
    id?: SortOrder
    heartId?: SortOrder
    channelId?: SortOrder
    heart?: HeartOrderByWithRelationInput
    channel?: ChannelOrderByWithRelationInput
  }

  export type ChannelHeartWhereUniqueInput = {
    id?: string
  }

  export type ChannelHeartOrderByWithAggregationInput = {
    id?: SortOrder
    heartId?: SortOrder
    channelId?: SortOrder
    _count?: ChannelHeartCountOrderByAggregateInput
    _max?: ChannelHeartMaxOrderByAggregateInput
    _min?: ChannelHeartMinOrderByAggregateInput
  }

  export type ChannelHeartScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ChannelHeartScalarWhereWithAggregatesInput>
    OR?: Enumerable<ChannelHeartScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ChannelHeartScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    heartId?: StringWithAggregatesFilter | string
    channelId?: StringWithAggregatesFilter | string
  }

  export type EpisodeHeartWhereInput = {
    AND?: Enumerable<EpisodeHeartWhereInput>
    OR?: Enumerable<EpisodeHeartWhereInput>
    NOT?: Enumerable<EpisodeHeartWhereInput>
    id?: StringFilter | string
    heartId?: StringFilter | string
    episodeId?: StringFilter | string
    heart?: XOR<HeartRelationFilter, HeartWhereInput>
    episode?: XOR<EpisodeRelationFilter, EpisodeWhereInput>
  }

  export type EpisodeHeartOrderByWithRelationInput = {
    id?: SortOrder
    heartId?: SortOrder
    episodeId?: SortOrder
    heart?: HeartOrderByWithRelationInput
    episode?: EpisodeOrderByWithRelationInput
  }

  export type EpisodeHeartWhereUniqueInput = {
    id?: string
  }

  export type EpisodeHeartOrderByWithAggregationInput = {
    id?: SortOrder
    heartId?: SortOrder
    episodeId?: SortOrder
    _count?: EpisodeHeartCountOrderByAggregateInput
    _max?: EpisodeHeartMaxOrderByAggregateInput
    _min?: EpisodeHeartMinOrderByAggregateInput
  }

  export type EpisodeHeartScalarWhereWithAggregatesInput = {
    AND?: Enumerable<EpisodeHeartScalarWhereWithAggregatesInput>
    OR?: Enumerable<EpisodeHeartScalarWhereWithAggregatesInput>
    NOT?: Enumerable<EpisodeHeartScalarWhereWithAggregatesInput>
    id?: StringWithAggregatesFilter | string
    heartId?: StringWithAggregatesFilter | string
    episodeId?: StringWithAggregatesFilter | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    hearts?: HeartCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    hearts?: HeartUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hearts?: HeartUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    hearts?: HeartUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type GenreCreateInput = {
    id: number
    name: string
    channels?: GenresOnChannelsCreateNestedManyWithoutGenreInput
  }

  export type GenreUncheckedCreateInput = {
    id: number
    name: string
    channels?: GenresOnChannelsUncheckedCreateNestedManyWithoutGenreInput
  }

  export type GenreUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    channels?: GenresOnChannelsUpdateManyWithoutGenreNestedInput
  }

  export type GenreUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    channels?: GenresOnChannelsUncheckedUpdateManyWithoutGenreNestedInput
  }

  export type GenreCreateManyInput = {
    id: number
    name: string
  }

  export type GenreUpdateManyMutationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelCreateInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    genres?: GenresOnChannelsCreateNestedManyWithoutChannelInput
    episodes?: EpisodeCreateNestedManyWithoutChannelInput
    channelHearts?: ChannelHeartCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    genres?: GenresOnChannelsUncheckedCreateNestedManyWithoutChannelInput
    episodes?: EpisodeUncheckedCreateNestedManyWithoutChannelInput
    channelHearts?: ChannelHeartUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    genres?: GenresOnChannelsUpdateManyWithoutChannelNestedInput
    episodes?: EpisodeUpdateManyWithoutChannelNestedInput
    channelHearts?: ChannelHeartUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    genres?: GenresOnChannelsUncheckedUpdateManyWithoutChannelNestedInput
    episodes?: EpisodeUncheckedUpdateManyWithoutChannelNestedInput
    channelHearts?: ChannelHeartUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type ChannelCreateManyInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
  }

  export type ChannelUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
  }

  export type GenresOnChannelsCreateInput = {
    channel: ChannelCreateNestedOneWithoutGenresInput
    genre: GenreCreateNestedOneWithoutChannelsInput
  }

  export type GenresOnChannelsUncheckedCreateInput = {
    channelId: string
    genreId: number
  }

  export type GenresOnChannelsUpdateInput = {
    channel?: ChannelUpdateOneRequiredWithoutGenresNestedInput
    genre?: GenreUpdateOneRequiredWithoutChannelsNestedInput
  }

  export type GenresOnChannelsUncheckedUpdateInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type GenresOnChannelsCreateManyInput = {
    channelId: string
    genreId: number
  }

  export type GenresOnChannelsUpdateManyMutationInput = {

  }

  export type GenresOnChannelsUncheckedUpdateManyInput = {
    channelId?: StringFieldUpdateOperationsInput | string
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeCreateInput = {
    id?: string
    title: string
    thumbnail: string
    channel: ChannelCreateNestedOneWithoutEpisodesInput
    episodeHearts?: EpisodeHeartCreateNestedManyWithoutEpisodeInput
  }

  export type EpisodeUncheckedCreateInput = {
    id?: string
    title: string
    thumbnail: string
    channelId: string
    episodeHearts?: EpisodeHeartUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type EpisodeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutEpisodesNestedInput
    episodeHearts?: EpisodeHeartUpdateManyWithoutEpisodeNestedInput
  }

  export type EpisodeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
    episodeHearts?: EpisodeHeartUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type EpisodeCreateManyInput = {
    id?: string
    title: string
    thumbnail: string
    channelId: string
  }

  export type EpisodeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
  }

  export type EpisodeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
  }

  export type HeartCreateInput = {
    id?: string
    user: UserCreateNestedOneWithoutHeartsInput
    channelHearts?: ChannelHeartCreateNestedManyWithoutHeartInput
    episodeHearts?: EpisodeHeartCreateNestedManyWithoutHeartInput
  }

  export type HeartUncheckedCreateInput = {
    id?: string
    userId: string
    channelHearts?: ChannelHeartUncheckedCreateNestedManyWithoutHeartInput
    episodeHearts?: EpisodeHeartUncheckedCreateNestedManyWithoutHeartInput
  }

  export type HeartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutHeartsNestedInput
    channelHearts?: ChannelHeartUpdateManyWithoutHeartNestedInput
    episodeHearts?: EpisodeHeartUpdateManyWithoutHeartNestedInput
  }

  export type HeartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    channelHearts?: ChannelHeartUncheckedUpdateManyWithoutHeartNestedInput
    episodeHearts?: EpisodeHeartUncheckedUpdateManyWithoutHeartNestedInput
  }

  export type HeartCreateManyInput = {
    id?: string
    userId: string
  }

  export type HeartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type HeartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelHeartCreateInput = {
    id?: string
    heart: HeartCreateNestedOneWithoutChannelHeartsInput
    channel: ChannelCreateNestedOneWithoutChannelHeartsInput
  }

  export type ChannelHeartUncheckedCreateInput = {
    id?: string
    heartId: string
    channelId: string
  }

  export type ChannelHeartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    heart?: HeartUpdateOneRequiredWithoutChannelHeartsNestedInput
    channel?: ChannelUpdateOneRequiredWithoutChannelHeartsNestedInput
  }

  export type ChannelHeartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelHeartCreateManyInput = {
    id?: string
    heartId: string
    channelId: string
  }

  export type ChannelHeartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelHeartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
  }

  export type EpisodeHeartCreateInput = {
    id?: string
    heart: HeartCreateNestedOneWithoutEpisodeHeartsInput
    episode: EpisodeCreateNestedOneWithoutEpisodeHeartsInput
  }

  export type EpisodeHeartUncheckedCreateInput = {
    id?: string
    heartId: string
    episodeId: string
  }

  export type EpisodeHeartUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    heart?: HeartUpdateOneRequiredWithoutEpisodeHeartsNestedInput
    episode?: EpisodeUpdateOneRequiredWithoutEpisodeHeartsNestedInput
  }

  export type EpisodeHeartUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
    episodeId?: StringFieldUpdateOperationsInput | string
  }

  export type EpisodeHeartCreateManyInput = {
    id?: string
    heartId: string
    episodeId: string
  }

  export type EpisodeHeartUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type EpisodeHeartUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
    episodeId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type HeartListRelationFilter = {
    every?: HeartWhereInput
    some?: HeartWhereInput
    none?: HeartWhereInput
  }

  export type HeartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type GenresOnChannelsListRelationFilter = {
    every?: GenresOnChannelsWhereInput
    some?: GenresOnChannelsWhereInput
    none?: GenresOnChannelsWhereInput
  }

  export type GenresOnChannelsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type GenreCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type GenreMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type GenreSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EpisodeListRelationFilter = {
    every?: EpisodeWhereInput
    some?: EpisodeWhereInput
    none?: EpisodeWhereInput
  }

  export type ChannelHeartListRelationFilter = {
    every?: ChannelHeartWhereInput
    some?: ChannelHeartWhereInput
    none?: ChannelHeartWhereInput
  }

  export type EpisodeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelHeartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ChannelCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    thumbnail?: SortOrder
  }

  export type ChannelMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    thumbnail?: SortOrder
  }

  export type ChannelMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    publisher?: SortOrder
    thumbnail?: SortOrder
  }

  export type ChannelRelationFilter = {
    is?: ChannelWhereInput
    isNot?: ChannelWhereInput
  }

  export type GenreRelationFilter = {
    is?: GenreWhereInput
    isNot?: GenreWhereInput
  }

  export type GenresOnChannelsChannelIdGenreIdCompoundUniqueInput = {
    channelId: string
    genreId: number
  }

  export type GenresOnChannelsCountOrderByAggregateInput = {
    channelId?: SortOrder
    genreId?: SortOrder
  }

  export type GenresOnChannelsAvgOrderByAggregateInput = {
    genreId?: SortOrder
  }

  export type GenresOnChannelsMaxOrderByAggregateInput = {
    channelId?: SortOrder
    genreId?: SortOrder
  }

  export type GenresOnChannelsMinOrderByAggregateInput = {
    channelId?: SortOrder
    genreId?: SortOrder
  }

  export type GenresOnChannelsSumOrderByAggregateInput = {
    genreId?: SortOrder
  }

  export type EpisodeHeartListRelationFilter = {
    every?: EpisodeHeartWhereInput
    some?: EpisodeHeartWhereInput
    none?: EpisodeHeartWhereInput
  }

  export type EpisodeHeartOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EpisodeCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    channelId?: SortOrder
  }

  export type EpisodeMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    channelId?: SortOrder
  }

  export type EpisodeMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    thumbnail?: SortOrder
    channelId?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type HeartCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HeartMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HeartMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type HeartRelationFilter = {
    is?: HeartWhereInput
    isNot?: HeartWhereInput
  }

  export type ChannelHeartCountOrderByAggregateInput = {
    id?: SortOrder
    heartId?: SortOrder
    channelId?: SortOrder
  }

  export type ChannelHeartMaxOrderByAggregateInput = {
    id?: SortOrder
    heartId?: SortOrder
    channelId?: SortOrder
  }

  export type ChannelHeartMinOrderByAggregateInput = {
    id?: SortOrder
    heartId?: SortOrder
    channelId?: SortOrder
  }

  export type EpisodeRelationFilter = {
    is?: EpisodeWhereInput
    isNot?: EpisodeWhereInput
  }

  export type EpisodeHeartCountOrderByAggregateInput = {
    id?: SortOrder
    heartId?: SortOrder
    episodeId?: SortOrder
  }

  export type EpisodeHeartMaxOrderByAggregateInput = {
    id?: SortOrder
    heartId?: SortOrder
    episodeId?: SortOrder
  }

  export type EpisodeHeartMinOrderByAggregateInput = {
    id?: SortOrder
    heartId?: SortOrder
    episodeId?: SortOrder
  }

  export type HeartCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HeartCreateWithoutUserInput>, Enumerable<HeartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HeartCreateOrConnectWithoutUserInput>
    createMany?: HeartCreateManyUserInputEnvelope
    connect?: Enumerable<HeartWhereUniqueInput>
  }

  export type HeartUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<HeartCreateWithoutUserInput>, Enumerable<HeartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HeartCreateOrConnectWithoutUserInput>
    createMany?: HeartCreateManyUserInputEnvelope
    connect?: Enumerable<HeartWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type HeartUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HeartCreateWithoutUserInput>, Enumerable<HeartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HeartCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HeartUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HeartCreateManyUserInputEnvelope
    set?: Enumerable<HeartWhereUniqueInput>
    disconnect?: Enumerable<HeartWhereUniqueInput>
    delete?: Enumerable<HeartWhereUniqueInput>
    connect?: Enumerable<HeartWhereUniqueInput>
    update?: Enumerable<HeartUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HeartUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HeartScalarWhereInput>
  }

  export type HeartUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<HeartCreateWithoutUserInput>, Enumerable<HeartUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<HeartCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<HeartUpsertWithWhereUniqueWithoutUserInput>
    createMany?: HeartCreateManyUserInputEnvelope
    set?: Enumerable<HeartWhereUniqueInput>
    disconnect?: Enumerable<HeartWhereUniqueInput>
    delete?: Enumerable<HeartWhereUniqueInput>
    connect?: Enumerable<HeartWhereUniqueInput>
    update?: Enumerable<HeartUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<HeartUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<HeartScalarWhereInput>
  }

  export type GenresOnChannelsCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutGenreInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutGenreInput>
    createMany?: GenresOnChannelsCreateManyGenreInputEnvelope
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
  }

  export type GenresOnChannelsUncheckedCreateNestedManyWithoutGenreInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutGenreInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutGenreInput>
    createMany?: GenresOnChannelsCreateManyGenreInputEnvelope
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type GenresOnChannelsUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutGenreInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<GenresOnChannelsUpsertWithWhereUniqueWithoutGenreInput>
    createMany?: GenresOnChannelsCreateManyGenreInputEnvelope
    set?: Enumerable<GenresOnChannelsWhereUniqueInput>
    disconnect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    delete?: Enumerable<GenresOnChannelsWhereUniqueInput>
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    update?: Enumerable<GenresOnChannelsUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<GenresOnChannelsUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<GenresOnChannelsScalarWhereInput>
  }

  export type GenresOnChannelsUncheckedUpdateManyWithoutGenreNestedInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutGenreInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutGenreInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutGenreInput>
    upsert?: Enumerable<GenresOnChannelsUpsertWithWhereUniqueWithoutGenreInput>
    createMany?: GenresOnChannelsCreateManyGenreInputEnvelope
    set?: Enumerable<GenresOnChannelsWhereUniqueInput>
    disconnect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    delete?: Enumerable<GenresOnChannelsWhereUniqueInput>
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    update?: Enumerable<GenresOnChannelsUpdateWithWhereUniqueWithoutGenreInput>
    updateMany?: Enumerable<GenresOnChannelsUpdateManyWithWhereWithoutGenreInput>
    deleteMany?: Enumerable<GenresOnChannelsScalarWhereInput>
  }

  export type GenresOnChannelsCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutChannelInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutChannelInput>
    createMany?: GenresOnChannelsCreateManyChannelInputEnvelope
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
  }

  export type EpisodeCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<EpisodeCreateWithoutChannelInput>, Enumerable<EpisodeUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<EpisodeCreateOrConnectWithoutChannelInput>
    createMany?: EpisodeCreateManyChannelInputEnvelope
    connect?: Enumerable<EpisodeWhereUniqueInput>
  }

  export type ChannelHeartCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutChannelInput>, Enumerable<ChannelHeartUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutChannelInput>
    createMany?: ChannelHeartCreateManyChannelInputEnvelope
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
  }

  export type GenresOnChannelsUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutChannelInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutChannelInput>
    createMany?: GenresOnChannelsCreateManyChannelInputEnvelope
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
  }

  export type EpisodeUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<EpisodeCreateWithoutChannelInput>, Enumerable<EpisodeUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<EpisodeCreateOrConnectWithoutChannelInput>
    createMany?: EpisodeCreateManyChannelInputEnvelope
    connect?: Enumerable<EpisodeWhereUniqueInput>
  }

  export type ChannelHeartUncheckedCreateNestedManyWithoutChannelInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutChannelInput>, Enumerable<ChannelHeartUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutChannelInput>
    createMany?: ChannelHeartCreateManyChannelInputEnvelope
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
  }

  export type GenresOnChannelsUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutChannelInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<GenresOnChannelsUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: GenresOnChannelsCreateManyChannelInputEnvelope
    set?: Enumerable<GenresOnChannelsWhereUniqueInput>
    disconnect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    delete?: Enumerable<GenresOnChannelsWhereUniqueInput>
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    update?: Enumerable<GenresOnChannelsUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<GenresOnChannelsUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<GenresOnChannelsScalarWhereInput>
  }

  export type EpisodeUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<EpisodeCreateWithoutChannelInput>, Enumerable<EpisodeUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<EpisodeCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<EpisodeUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: EpisodeCreateManyChannelInputEnvelope
    set?: Enumerable<EpisodeWhereUniqueInput>
    disconnect?: Enumerable<EpisodeWhereUniqueInput>
    delete?: Enumerable<EpisodeWhereUniqueInput>
    connect?: Enumerable<EpisodeWhereUniqueInput>
    update?: Enumerable<EpisodeUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<EpisodeUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<EpisodeScalarWhereInput>
  }

  export type ChannelHeartUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutChannelInput>, Enumerable<ChannelHeartUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<ChannelHeartUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: ChannelHeartCreateManyChannelInputEnvelope
    set?: Enumerable<ChannelHeartWhereUniqueInput>
    disconnect?: Enumerable<ChannelHeartWhereUniqueInput>
    delete?: Enumerable<ChannelHeartWhereUniqueInput>
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
    update?: Enumerable<ChannelHeartUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<ChannelHeartUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<ChannelHeartScalarWhereInput>
  }

  export type GenresOnChannelsUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<GenresOnChannelsCreateWithoutChannelInput>, Enumerable<GenresOnChannelsUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<GenresOnChannelsCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<GenresOnChannelsUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: GenresOnChannelsCreateManyChannelInputEnvelope
    set?: Enumerable<GenresOnChannelsWhereUniqueInput>
    disconnect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    delete?: Enumerable<GenresOnChannelsWhereUniqueInput>
    connect?: Enumerable<GenresOnChannelsWhereUniqueInput>
    update?: Enumerable<GenresOnChannelsUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<GenresOnChannelsUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<GenresOnChannelsScalarWhereInput>
  }

  export type EpisodeUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<EpisodeCreateWithoutChannelInput>, Enumerable<EpisodeUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<EpisodeCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<EpisodeUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: EpisodeCreateManyChannelInputEnvelope
    set?: Enumerable<EpisodeWhereUniqueInput>
    disconnect?: Enumerable<EpisodeWhereUniqueInput>
    delete?: Enumerable<EpisodeWhereUniqueInput>
    connect?: Enumerable<EpisodeWhereUniqueInput>
    update?: Enumerable<EpisodeUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<EpisodeUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<EpisodeScalarWhereInput>
  }

  export type ChannelHeartUncheckedUpdateManyWithoutChannelNestedInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutChannelInput>, Enumerable<ChannelHeartUncheckedCreateWithoutChannelInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutChannelInput>
    upsert?: Enumerable<ChannelHeartUpsertWithWhereUniqueWithoutChannelInput>
    createMany?: ChannelHeartCreateManyChannelInputEnvelope
    set?: Enumerable<ChannelHeartWhereUniqueInput>
    disconnect?: Enumerable<ChannelHeartWhereUniqueInput>
    delete?: Enumerable<ChannelHeartWhereUniqueInput>
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
    update?: Enumerable<ChannelHeartUpdateWithWhereUniqueWithoutChannelInput>
    updateMany?: Enumerable<ChannelHeartUpdateManyWithWhereWithoutChannelInput>
    deleteMany?: Enumerable<ChannelHeartScalarWhereInput>
  }

  export type ChannelCreateNestedOneWithoutGenresInput = {
    create?: XOR<ChannelCreateWithoutGenresInput, ChannelUncheckedCreateWithoutGenresInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutGenresInput
    connect?: ChannelWhereUniqueInput
  }

  export type GenreCreateNestedOneWithoutChannelsInput = {
    create?: XOR<GenreCreateWithoutChannelsInput, GenreUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: GenreCreateOrConnectWithoutChannelsInput
    connect?: GenreWhereUniqueInput
  }

  export type ChannelUpdateOneRequiredWithoutGenresNestedInput = {
    create?: XOR<ChannelCreateWithoutGenresInput, ChannelUncheckedCreateWithoutGenresInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutGenresInput
    upsert?: ChannelUpsertWithoutGenresInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutGenresInput, ChannelUncheckedUpdateWithoutGenresInput>
  }

  export type GenreUpdateOneRequiredWithoutChannelsNestedInput = {
    create?: XOR<GenreCreateWithoutChannelsInput, GenreUncheckedCreateWithoutChannelsInput>
    connectOrCreate?: GenreCreateOrConnectWithoutChannelsInput
    upsert?: GenreUpsertWithoutChannelsInput
    connect?: GenreWhereUniqueInput
    update?: XOR<GenreUpdateWithoutChannelsInput, GenreUncheckedUpdateWithoutChannelsInput>
  }

  export type ChannelCreateNestedOneWithoutEpisodesInput = {
    create?: XOR<ChannelCreateWithoutEpisodesInput, ChannelUncheckedCreateWithoutEpisodesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutEpisodesInput
    connect?: ChannelWhereUniqueInput
  }

  export type EpisodeHeartCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutEpisodeInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutEpisodeInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutEpisodeInput>
    createMany?: EpisodeHeartCreateManyEpisodeInputEnvelope
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
  }

  export type EpisodeHeartUncheckedCreateNestedManyWithoutEpisodeInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutEpisodeInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutEpisodeInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutEpisodeInput>
    createMany?: EpisodeHeartCreateManyEpisodeInputEnvelope
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
  }

  export type ChannelUpdateOneRequiredWithoutEpisodesNestedInput = {
    create?: XOR<ChannelCreateWithoutEpisodesInput, ChannelUncheckedCreateWithoutEpisodesInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutEpisodesInput
    upsert?: ChannelUpsertWithoutEpisodesInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutEpisodesInput, ChannelUncheckedUpdateWithoutEpisodesInput>
  }

  export type EpisodeHeartUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutEpisodeInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutEpisodeInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutEpisodeInput>
    upsert?: Enumerable<EpisodeHeartUpsertWithWhereUniqueWithoutEpisodeInput>
    createMany?: EpisodeHeartCreateManyEpisodeInputEnvelope
    set?: Enumerable<EpisodeHeartWhereUniqueInput>
    disconnect?: Enumerable<EpisodeHeartWhereUniqueInput>
    delete?: Enumerable<EpisodeHeartWhereUniqueInput>
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
    update?: Enumerable<EpisodeHeartUpdateWithWhereUniqueWithoutEpisodeInput>
    updateMany?: Enumerable<EpisodeHeartUpdateManyWithWhereWithoutEpisodeInput>
    deleteMany?: Enumerable<EpisodeHeartScalarWhereInput>
  }

  export type EpisodeHeartUncheckedUpdateManyWithoutEpisodeNestedInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutEpisodeInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutEpisodeInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutEpisodeInput>
    upsert?: Enumerable<EpisodeHeartUpsertWithWhereUniqueWithoutEpisodeInput>
    createMany?: EpisodeHeartCreateManyEpisodeInputEnvelope
    set?: Enumerable<EpisodeHeartWhereUniqueInput>
    disconnect?: Enumerable<EpisodeHeartWhereUniqueInput>
    delete?: Enumerable<EpisodeHeartWhereUniqueInput>
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
    update?: Enumerable<EpisodeHeartUpdateWithWhereUniqueWithoutEpisodeInput>
    updateMany?: Enumerable<EpisodeHeartUpdateManyWithWhereWithoutEpisodeInput>
    deleteMany?: Enumerable<EpisodeHeartScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutHeartsInput = {
    create?: XOR<UserCreateWithoutHeartsInput, UserUncheckedCreateWithoutHeartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHeartsInput
    connect?: UserWhereUniqueInput
  }

  export type ChannelHeartCreateNestedManyWithoutHeartInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutHeartInput>, Enumerable<ChannelHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutHeartInput>
    createMany?: ChannelHeartCreateManyHeartInputEnvelope
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
  }

  export type EpisodeHeartCreateNestedManyWithoutHeartInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutHeartInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutHeartInput>
    createMany?: EpisodeHeartCreateManyHeartInputEnvelope
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
  }

  export type ChannelHeartUncheckedCreateNestedManyWithoutHeartInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutHeartInput>, Enumerable<ChannelHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutHeartInput>
    createMany?: ChannelHeartCreateManyHeartInputEnvelope
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
  }

  export type EpisodeHeartUncheckedCreateNestedManyWithoutHeartInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutHeartInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutHeartInput>
    createMany?: EpisodeHeartCreateManyHeartInputEnvelope
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
  }

  export type UserUpdateOneRequiredWithoutHeartsNestedInput = {
    create?: XOR<UserCreateWithoutHeartsInput, UserUncheckedCreateWithoutHeartsInput>
    connectOrCreate?: UserCreateOrConnectWithoutHeartsInput
    upsert?: UserUpsertWithoutHeartsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutHeartsInput, UserUncheckedUpdateWithoutHeartsInput>
  }

  export type ChannelHeartUpdateManyWithoutHeartNestedInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutHeartInput>, Enumerable<ChannelHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutHeartInput>
    upsert?: Enumerable<ChannelHeartUpsertWithWhereUniqueWithoutHeartInput>
    createMany?: ChannelHeartCreateManyHeartInputEnvelope
    set?: Enumerable<ChannelHeartWhereUniqueInput>
    disconnect?: Enumerable<ChannelHeartWhereUniqueInput>
    delete?: Enumerable<ChannelHeartWhereUniqueInput>
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
    update?: Enumerable<ChannelHeartUpdateWithWhereUniqueWithoutHeartInput>
    updateMany?: Enumerable<ChannelHeartUpdateManyWithWhereWithoutHeartInput>
    deleteMany?: Enumerable<ChannelHeartScalarWhereInput>
  }

  export type EpisodeHeartUpdateManyWithoutHeartNestedInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutHeartInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutHeartInput>
    upsert?: Enumerable<EpisodeHeartUpsertWithWhereUniqueWithoutHeartInput>
    createMany?: EpisodeHeartCreateManyHeartInputEnvelope
    set?: Enumerable<EpisodeHeartWhereUniqueInput>
    disconnect?: Enumerable<EpisodeHeartWhereUniqueInput>
    delete?: Enumerable<EpisodeHeartWhereUniqueInput>
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
    update?: Enumerable<EpisodeHeartUpdateWithWhereUniqueWithoutHeartInput>
    updateMany?: Enumerable<EpisodeHeartUpdateManyWithWhereWithoutHeartInput>
    deleteMany?: Enumerable<EpisodeHeartScalarWhereInput>
  }

  export type ChannelHeartUncheckedUpdateManyWithoutHeartNestedInput = {
    create?: XOR<Enumerable<ChannelHeartCreateWithoutHeartInput>, Enumerable<ChannelHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<ChannelHeartCreateOrConnectWithoutHeartInput>
    upsert?: Enumerable<ChannelHeartUpsertWithWhereUniqueWithoutHeartInput>
    createMany?: ChannelHeartCreateManyHeartInputEnvelope
    set?: Enumerable<ChannelHeartWhereUniqueInput>
    disconnect?: Enumerable<ChannelHeartWhereUniqueInput>
    delete?: Enumerable<ChannelHeartWhereUniqueInput>
    connect?: Enumerable<ChannelHeartWhereUniqueInput>
    update?: Enumerable<ChannelHeartUpdateWithWhereUniqueWithoutHeartInput>
    updateMany?: Enumerable<ChannelHeartUpdateManyWithWhereWithoutHeartInput>
    deleteMany?: Enumerable<ChannelHeartScalarWhereInput>
  }

  export type EpisodeHeartUncheckedUpdateManyWithoutHeartNestedInput = {
    create?: XOR<Enumerable<EpisodeHeartCreateWithoutHeartInput>, Enumerable<EpisodeHeartUncheckedCreateWithoutHeartInput>>
    connectOrCreate?: Enumerable<EpisodeHeartCreateOrConnectWithoutHeartInput>
    upsert?: Enumerable<EpisodeHeartUpsertWithWhereUniqueWithoutHeartInput>
    createMany?: EpisodeHeartCreateManyHeartInputEnvelope
    set?: Enumerable<EpisodeHeartWhereUniqueInput>
    disconnect?: Enumerable<EpisodeHeartWhereUniqueInput>
    delete?: Enumerable<EpisodeHeartWhereUniqueInput>
    connect?: Enumerable<EpisodeHeartWhereUniqueInput>
    update?: Enumerable<EpisodeHeartUpdateWithWhereUniqueWithoutHeartInput>
    updateMany?: Enumerable<EpisodeHeartUpdateManyWithWhereWithoutHeartInput>
    deleteMany?: Enumerable<EpisodeHeartScalarWhereInput>
  }

  export type HeartCreateNestedOneWithoutChannelHeartsInput = {
    create?: XOR<HeartCreateWithoutChannelHeartsInput, HeartUncheckedCreateWithoutChannelHeartsInput>
    connectOrCreate?: HeartCreateOrConnectWithoutChannelHeartsInput
    connect?: HeartWhereUniqueInput
  }

  export type ChannelCreateNestedOneWithoutChannelHeartsInput = {
    create?: XOR<ChannelCreateWithoutChannelHeartsInput, ChannelUncheckedCreateWithoutChannelHeartsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutChannelHeartsInput
    connect?: ChannelWhereUniqueInput
  }

  export type HeartUpdateOneRequiredWithoutChannelHeartsNestedInput = {
    create?: XOR<HeartCreateWithoutChannelHeartsInput, HeartUncheckedCreateWithoutChannelHeartsInput>
    connectOrCreate?: HeartCreateOrConnectWithoutChannelHeartsInput
    upsert?: HeartUpsertWithoutChannelHeartsInput
    connect?: HeartWhereUniqueInput
    update?: XOR<HeartUpdateWithoutChannelHeartsInput, HeartUncheckedUpdateWithoutChannelHeartsInput>
  }

  export type ChannelUpdateOneRequiredWithoutChannelHeartsNestedInput = {
    create?: XOR<ChannelCreateWithoutChannelHeartsInput, ChannelUncheckedCreateWithoutChannelHeartsInput>
    connectOrCreate?: ChannelCreateOrConnectWithoutChannelHeartsInput
    upsert?: ChannelUpsertWithoutChannelHeartsInput
    connect?: ChannelWhereUniqueInput
    update?: XOR<ChannelUpdateWithoutChannelHeartsInput, ChannelUncheckedUpdateWithoutChannelHeartsInput>
  }

  export type HeartCreateNestedOneWithoutEpisodeHeartsInput = {
    create?: XOR<HeartCreateWithoutEpisodeHeartsInput, HeartUncheckedCreateWithoutEpisodeHeartsInput>
    connectOrCreate?: HeartCreateOrConnectWithoutEpisodeHeartsInput
    connect?: HeartWhereUniqueInput
  }

  export type EpisodeCreateNestedOneWithoutEpisodeHeartsInput = {
    create?: XOR<EpisodeCreateWithoutEpisodeHeartsInput, EpisodeUncheckedCreateWithoutEpisodeHeartsInput>
    connectOrCreate?: EpisodeCreateOrConnectWithoutEpisodeHeartsInput
    connect?: EpisodeWhereUniqueInput
  }

  export type HeartUpdateOneRequiredWithoutEpisodeHeartsNestedInput = {
    create?: XOR<HeartCreateWithoutEpisodeHeartsInput, HeartUncheckedCreateWithoutEpisodeHeartsInput>
    connectOrCreate?: HeartCreateOrConnectWithoutEpisodeHeartsInput
    upsert?: HeartUpsertWithoutEpisodeHeartsInput
    connect?: HeartWhereUniqueInput
    update?: XOR<HeartUpdateWithoutEpisodeHeartsInput, HeartUncheckedUpdateWithoutEpisodeHeartsInput>
  }

  export type EpisodeUpdateOneRequiredWithoutEpisodeHeartsNestedInput = {
    create?: XOR<EpisodeCreateWithoutEpisodeHeartsInput, EpisodeUncheckedCreateWithoutEpisodeHeartsInput>
    connectOrCreate?: EpisodeCreateOrConnectWithoutEpisodeHeartsInput
    upsert?: EpisodeUpsertWithoutEpisodeHeartsInput
    connect?: EpisodeWhereUniqueInput
    update?: XOR<EpisodeUpdateWithoutEpisodeHeartsInput, EpisodeUncheckedUpdateWithoutEpisodeHeartsInput>
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type HeartCreateWithoutUserInput = {
    id?: string
    channelHearts?: ChannelHeartCreateNestedManyWithoutHeartInput
    episodeHearts?: EpisodeHeartCreateNestedManyWithoutHeartInput
  }

  export type HeartUncheckedCreateWithoutUserInput = {
    id?: string
    channelHearts?: ChannelHeartUncheckedCreateNestedManyWithoutHeartInput
    episodeHearts?: EpisodeHeartUncheckedCreateNestedManyWithoutHeartInput
  }

  export type HeartCreateOrConnectWithoutUserInput = {
    where: HeartWhereUniqueInput
    create: XOR<HeartCreateWithoutUserInput, HeartUncheckedCreateWithoutUserInput>
  }

  export type HeartCreateManyUserInputEnvelope = {
    data: Enumerable<HeartCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type HeartUpsertWithWhereUniqueWithoutUserInput = {
    where: HeartWhereUniqueInput
    update: XOR<HeartUpdateWithoutUserInput, HeartUncheckedUpdateWithoutUserInput>
    create: XOR<HeartCreateWithoutUserInput, HeartUncheckedCreateWithoutUserInput>
  }

  export type HeartUpdateWithWhereUniqueWithoutUserInput = {
    where: HeartWhereUniqueInput
    data: XOR<HeartUpdateWithoutUserInput, HeartUncheckedUpdateWithoutUserInput>
  }

  export type HeartUpdateManyWithWhereWithoutUserInput = {
    where: HeartScalarWhereInput
    data: XOR<HeartUpdateManyMutationInput, HeartUncheckedUpdateManyWithoutHeartsInput>
  }

  export type HeartScalarWhereInput = {
    AND?: Enumerable<HeartScalarWhereInput>
    OR?: Enumerable<HeartScalarWhereInput>
    NOT?: Enumerable<HeartScalarWhereInput>
    id?: StringFilter | string
    userId?: StringFilter | string
  }

  export type GenresOnChannelsCreateWithoutGenreInput = {
    channel: ChannelCreateNestedOneWithoutGenresInput
  }

  export type GenresOnChannelsUncheckedCreateWithoutGenreInput = {
    channelId: string
  }

  export type GenresOnChannelsCreateOrConnectWithoutGenreInput = {
    where: GenresOnChannelsWhereUniqueInput
    create: XOR<GenresOnChannelsCreateWithoutGenreInput, GenresOnChannelsUncheckedCreateWithoutGenreInput>
  }

  export type GenresOnChannelsCreateManyGenreInputEnvelope = {
    data: Enumerable<GenresOnChannelsCreateManyGenreInput>
    skipDuplicates?: boolean
  }

  export type GenresOnChannelsUpsertWithWhereUniqueWithoutGenreInput = {
    where: GenresOnChannelsWhereUniqueInput
    update: XOR<GenresOnChannelsUpdateWithoutGenreInput, GenresOnChannelsUncheckedUpdateWithoutGenreInput>
    create: XOR<GenresOnChannelsCreateWithoutGenreInput, GenresOnChannelsUncheckedCreateWithoutGenreInput>
  }

  export type GenresOnChannelsUpdateWithWhereUniqueWithoutGenreInput = {
    where: GenresOnChannelsWhereUniqueInput
    data: XOR<GenresOnChannelsUpdateWithoutGenreInput, GenresOnChannelsUncheckedUpdateWithoutGenreInput>
  }

  export type GenresOnChannelsUpdateManyWithWhereWithoutGenreInput = {
    where: GenresOnChannelsScalarWhereInput
    data: XOR<GenresOnChannelsUpdateManyMutationInput, GenresOnChannelsUncheckedUpdateManyWithoutChannelsInput>
  }

  export type GenresOnChannelsScalarWhereInput = {
    AND?: Enumerable<GenresOnChannelsScalarWhereInput>
    OR?: Enumerable<GenresOnChannelsScalarWhereInput>
    NOT?: Enumerable<GenresOnChannelsScalarWhereInput>
    channelId?: StringFilter | string
    genreId?: IntFilter | number
  }

  export type GenresOnChannelsCreateWithoutChannelInput = {
    genre: GenreCreateNestedOneWithoutChannelsInput
  }

  export type GenresOnChannelsUncheckedCreateWithoutChannelInput = {
    genreId: number
  }

  export type GenresOnChannelsCreateOrConnectWithoutChannelInput = {
    where: GenresOnChannelsWhereUniqueInput
    create: XOR<GenresOnChannelsCreateWithoutChannelInput, GenresOnChannelsUncheckedCreateWithoutChannelInput>
  }

  export type GenresOnChannelsCreateManyChannelInputEnvelope = {
    data: Enumerable<GenresOnChannelsCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type EpisodeCreateWithoutChannelInput = {
    id?: string
    title: string
    thumbnail: string
    episodeHearts?: EpisodeHeartCreateNestedManyWithoutEpisodeInput
  }

  export type EpisodeUncheckedCreateWithoutChannelInput = {
    id?: string
    title: string
    thumbnail: string
    episodeHearts?: EpisodeHeartUncheckedCreateNestedManyWithoutEpisodeInput
  }

  export type EpisodeCreateOrConnectWithoutChannelInput = {
    where: EpisodeWhereUniqueInput
    create: XOR<EpisodeCreateWithoutChannelInput, EpisodeUncheckedCreateWithoutChannelInput>
  }

  export type EpisodeCreateManyChannelInputEnvelope = {
    data: Enumerable<EpisodeCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type ChannelHeartCreateWithoutChannelInput = {
    id?: string
    heart: HeartCreateNestedOneWithoutChannelHeartsInput
  }

  export type ChannelHeartUncheckedCreateWithoutChannelInput = {
    id?: string
    heartId: string
  }

  export type ChannelHeartCreateOrConnectWithoutChannelInput = {
    where: ChannelHeartWhereUniqueInput
    create: XOR<ChannelHeartCreateWithoutChannelInput, ChannelHeartUncheckedCreateWithoutChannelInput>
  }

  export type ChannelHeartCreateManyChannelInputEnvelope = {
    data: Enumerable<ChannelHeartCreateManyChannelInput>
    skipDuplicates?: boolean
  }

  export type GenresOnChannelsUpsertWithWhereUniqueWithoutChannelInput = {
    where: GenresOnChannelsWhereUniqueInput
    update: XOR<GenresOnChannelsUpdateWithoutChannelInput, GenresOnChannelsUncheckedUpdateWithoutChannelInput>
    create: XOR<GenresOnChannelsCreateWithoutChannelInput, GenresOnChannelsUncheckedCreateWithoutChannelInput>
  }

  export type GenresOnChannelsUpdateWithWhereUniqueWithoutChannelInput = {
    where: GenresOnChannelsWhereUniqueInput
    data: XOR<GenresOnChannelsUpdateWithoutChannelInput, GenresOnChannelsUncheckedUpdateWithoutChannelInput>
  }

  export type GenresOnChannelsUpdateManyWithWhereWithoutChannelInput = {
    where: GenresOnChannelsScalarWhereInput
    data: XOR<GenresOnChannelsUpdateManyMutationInput, GenresOnChannelsUncheckedUpdateManyWithoutGenresInput>
  }

  export type EpisodeUpsertWithWhereUniqueWithoutChannelInput = {
    where: EpisodeWhereUniqueInput
    update: XOR<EpisodeUpdateWithoutChannelInput, EpisodeUncheckedUpdateWithoutChannelInput>
    create: XOR<EpisodeCreateWithoutChannelInput, EpisodeUncheckedCreateWithoutChannelInput>
  }

  export type EpisodeUpdateWithWhereUniqueWithoutChannelInput = {
    where: EpisodeWhereUniqueInput
    data: XOR<EpisodeUpdateWithoutChannelInput, EpisodeUncheckedUpdateWithoutChannelInput>
  }

  export type EpisodeUpdateManyWithWhereWithoutChannelInput = {
    where: EpisodeScalarWhereInput
    data: XOR<EpisodeUpdateManyMutationInput, EpisodeUncheckedUpdateManyWithoutEpisodesInput>
  }

  export type EpisodeScalarWhereInput = {
    AND?: Enumerable<EpisodeScalarWhereInput>
    OR?: Enumerable<EpisodeScalarWhereInput>
    NOT?: Enumerable<EpisodeScalarWhereInput>
    id?: StringFilter | string
    title?: StringFilter | string
    thumbnail?: StringFilter | string
    channelId?: StringFilter | string
  }

  export type ChannelHeartUpsertWithWhereUniqueWithoutChannelInput = {
    where: ChannelHeartWhereUniqueInput
    update: XOR<ChannelHeartUpdateWithoutChannelInput, ChannelHeartUncheckedUpdateWithoutChannelInput>
    create: XOR<ChannelHeartCreateWithoutChannelInput, ChannelHeartUncheckedCreateWithoutChannelInput>
  }

  export type ChannelHeartUpdateWithWhereUniqueWithoutChannelInput = {
    where: ChannelHeartWhereUniqueInput
    data: XOR<ChannelHeartUpdateWithoutChannelInput, ChannelHeartUncheckedUpdateWithoutChannelInput>
  }

  export type ChannelHeartUpdateManyWithWhereWithoutChannelInput = {
    where: ChannelHeartScalarWhereInput
    data: XOR<ChannelHeartUpdateManyMutationInput, ChannelHeartUncheckedUpdateManyWithoutChannelHeartsInput>
  }

  export type ChannelHeartScalarWhereInput = {
    AND?: Enumerable<ChannelHeartScalarWhereInput>
    OR?: Enumerable<ChannelHeartScalarWhereInput>
    NOT?: Enumerable<ChannelHeartScalarWhereInput>
    id?: StringFilter | string
    heartId?: StringFilter | string
    channelId?: StringFilter | string
  }

  export type ChannelCreateWithoutGenresInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    episodes?: EpisodeCreateNestedManyWithoutChannelInput
    channelHearts?: ChannelHeartCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutGenresInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    episodes?: EpisodeUncheckedCreateNestedManyWithoutChannelInput
    channelHearts?: ChannelHeartUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutGenresInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutGenresInput, ChannelUncheckedCreateWithoutGenresInput>
  }

  export type GenreCreateWithoutChannelsInput = {
    id: number
    name: string
  }

  export type GenreUncheckedCreateWithoutChannelsInput = {
    id: number
    name: string
  }

  export type GenreCreateOrConnectWithoutChannelsInput = {
    where: GenreWhereUniqueInput
    create: XOR<GenreCreateWithoutChannelsInput, GenreUncheckedCreateWithoutChannelsInput>
  }

  export type ChannelUpsertWithoutGenresInput = {
    update: XOR<ChannelUpdateWithoutGenresInput, ChannelUncheckedUpdateWithoutGenresInput>
    create: XOR<ChannelCreateWithoutGenresInput, ChannelUncheckedCreateWithoutGenresInput>
  }

  export type ChannelUpdateWithoutGenresInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    episodes?: EpisodeUpdateManyWithoutChannelNestedInput
    channelHearts?: ChannelHeartUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutGenresInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    episodes?: EpisodeUncheckedUpdateManyWithoutChannelNestedInput
    channelHearts?: ChannelHeartUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type GenreUpsertWithoutChannelsInput = {
    update: XOR<GenreUpdateWithoutChannelsInput, GenreUncheckedUpdateWithoutChannelsInput>
    create: XOR<GenreCreateWithoutChannelsInput, GenreUncheckedCreateWithoutChannelsInput>
  }

  export type GenreUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type GenreUncheckedUpdateWithoutChannelsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelCreateWithoutEpisodesInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    genres?: GenresOnChannelsCreateNestedManyWithoutChannelInput
    channelHearts?: ChannelHeartCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutEpisodesInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    genres?: GenresOnChannelsUncheckedCreateNestedManyWithoutChannelInput
    channelHearts?: ChannelHeartUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutEpisodesInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutEpisodesInput, ChannelUncheckedCreateWithoutEpisodesInput>
  }

  export type EpisodeHeartCreateWithoutEpisodeInput = {
    id?: string
    heart: HeartCreateNestedOneWithoutEpisodeHeartsInput
  }

  export type EpisodeHeartUncheckedCreateWithoutEpisodeInput = {
    id?: string
    heartId: string
  }

  export type EpisodeHeartCreateOrConnectWithoutEpisodeInput = {
    where: EpisodeHeartWhereUniqueInput
    create: XOR<EpisodeHeartCreateWithoutEpisodeInput, EpisodeHeartUncheckedCreateWithoutEpisodeInput>
  }

  export type EpisodeHeartCreateManyEpisodeInputEnvelope = {
    data: Enumerable<EpisodeHeartCreateManyEpisodeInput>
    skipDuplicates?: boolean
  }

  export type ChannelUpsertWithoutEpisodesInput = {
    update: XOR<ChannelUpdateWithoutEpisodesInput, ChannelUncheckedUpdateWithoutEpisodesInput>
    create: XOR<ChannelCreateWithoutEpisodesInput, ChannelUncheckedCreateWithoutEpisodesInput>
  }

  export type ChannelUpdateWithoutEpisodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    genres?: GenresOnChannelsUpdateManyWithoutChannelNestedInput
    channelHearts?: ChannelHeartUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutEpisodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    genres?: GenresOnChannelsUncheckedUpdateManyWithoutChannelNestedInput
    channelHearts?: ChannelHeartUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type EpisodeHeartUpsertWithWhereUniqueWithoutEpisodeInput = {
    where: EpisodeHeartWhereUniqueInput
    update: XOR<EpisodeHeartUpdateWithoutEpisodeInput, EpisodeHeartUncheckedUpdateWithoutEpisodeInput>
    create: XOR<EpisodeHeartCreateWithoutEpisodeInput, EpisodeHeartUncheckedCreateWithoutEpisodeInput>
  }

  export type EpisodeHeartUpdateWithWhereUniqueWithoutEpisodeInput = {
    where: EpisodeHeartWhereUniqueInput
    data: XOR<EpisodeHeartUpdateWithoutEpisodeInput, EpisodeHeartUncheckedUpdateWithoutEpisodeInput>
  }

  export type EpisodeHeartUpdateManyWithWhereWithoutEpisodeInput = {
    where: EpisodeHeartScalarWhereInput
    data: XOR<EpisodeHeartUpdateManyMutationInput, EpisodeHeartUncheckedUpdateManyWithoutEpisodeHeartsInput>
  }

  export type EpisodeHeartScalarWhereInput = {
    AND?: Enumerable<EpisodeHeartScalarWhereInput>
    OR?: Enumerable<EpisodeHeartScalarWhereInput>
    NOT?: Enumerable<EpisodeHeartScalarWhereInput>
    id?: StringFilter | string
    heartId?: StringFilter | string
    episodeId?: StringFilter | string
  }

  export type UserCreateWithoutHeartsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
  }

  export type UserUncheckedCreateWithoutHeartsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
  }

  export type UserCreateOrConnectWithoutHeartsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHeartsInput, UserUncheckedCreateWithoutHeartsInput>
  }

  export type ChannelHeartCreateWithoutHeartInput = {
    id?: string
    channel: ChannelCreateNestedOneWithoutChannelHeartsInput
  }

  export type ChannelHeartUncheckedCreateWithoutHeartInput = {
    id?: string
    channelId: string
  }

  export type ChannelHeartCreateOrConnectWithoutHeartInput = {
    where: ChannelHeartWhereUniqueInput
    create: XOR<ChannelHeartCreateWithoutHeartInput, ChannelHeartUncheckedCreateWithoutHeartInput>
  }

  export type ChannelHeartCreateManyHeartInputEnvelope = {
    data: Enumerable<ChannelHeartCreateManyHeartInput>
    skipDuplicates?: boolean
  }

  export type EpisodeHeartCreateWithoutHeartInput = {
    id?: string
    episode: EpisodeCreateNestedOneWithoutEpisodeHeartsInput
  }

  export type EpisodeHeartUncheckedCreateWithoutHeartInput = {
    id?: string
    episodeId: string
  }

  export type EpisodeHeartCreateOrConnectWithoutHeartInput = {
    where: EpisodeHeartWhereUniqueInput
    create: XOR<EpisodeHeartCreateWithoutHeartInput, EpisodeHeartUncheckedCreateWithoutHeartInput>
  }

  export type EpisodeHeartCreateManyHeartInputEnvelope = {
    data: Enumerable<EpisodeHeartCreateManyHeartInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutHeartsInput = {
    update: XOR<UserUpdateWithoutHeartsInput, UserUncheckedUpdateWithoutHeartsInput>
    create: XOR<UserCreateWithoutHeartsInput, UserUncheckedCreateWithoutHeartsInput>
  }

  export type UserUpdateWithoutHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateWithoutHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ChannelHeartUpsertWithWhereUniqueWithoutHeartInput = {
    where: ChannelHeartWhereUniqueInput
    update: XOR<ChannelHeartUpdateWithoutHeartInput, ChannelHeartUncheckedUpdateWithoutHeartInput>
    create: XOR<ChannelHeartCreateWithoutHeartInput, ChannelHeartUncheckedCreateWithoutHeartInput>
  }

  export type ChannelHeartUpdateWithWhereUniqueWithoutHeartInput = {
    where: ChannelHeartWhereUniqueInput
    data: XOR<ChannelHeartUpdateWithoutHeartInput, ChannelHeartUncheckedUpdateWithoutHeartInput>
  }

  export type ChannelHeartUpdateManyWithWhereWithoutHeartInput = {
    where: ChannelHeartScalarWhereInput
    data: XOR<ChannelHeartUpdateManyMutationInput, ChannelHeartUncheckedUpdateManyWithoutChannelHeartsInput>
  }

  export type EpisodeHeartUpsertWithWhereUniqueWithoutHeartInput = {
    where: EpisodeHeartWhereUniqueInput
    update: XOR<EpisodeHeartUpdateWithoutHeartInput, EpisodeHeartUncheckedUpdateWithoutHeartInput>
    create: XOR<EpisodeHeartCreateWithoutHeartInput, EpisodeHeartUncheckedCreateWithoutHeartInput>
  }

  export type EpisodeHeartUpdateWithWhereUniqueWithoutHeartInput = {
    where: EpisodeHeartWhereUniqueInput
    data: XOR<EpisodeHeartUpdateWithoutHeartInput, EpisodeHeartUncheckedUpdateWithoutHeartInput>
  }

  export type EpisodeHeartUpdateManyWithWhereWithoutHeartInput = {
    where: EpisodeHeartScalarWhereInput
    data: XOR<EpisodeHeartUpdateManyMutationInput, EpisodeHeartUncheckedUpdateManyWithoutEpisodeHeartsInput>
  }

  export type HeartCreateWithoutChannelHeartsInput = {
    id?: string
    user: UserCreateNestedOneWithoutHeartsInput
    episodeHearts?: EpisodeHeartCreateNestedManyWithoutHeartInput
  }

  export type HeartUncheckedCreateWithoutChannelHeartsInput = {
    id?: string
    userId: string
    episodeHearts?: EpisodeHeartUncheckedCreateNestedManyWithoutHeartInput
  }

  export type HeartCreateOrConnectWithoutChannelHeartsInput = {
    where: HeartWhereUniqueInput
    create: XOR<HeartCreateWithoutChannelHeartsInput, HeartUncheckedCreateWithoutChannelHeartsInput>
  }

  export type ChannelCreateWithoutChannelHeartsInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    genres?: GenresOnChannelsCreateNestedManyWithoutChannelInput
    episodes?: EpisodeCreateNestedManyWithoutChannelInput
  }

  export type ChannelUncheckedCreateWithoutChannelHeartsInput = {
    id?: string
    title: string
    publisher: string
    thumbnail: string
    genres?: GenresOnChannelsUncheckedCreateNestedManyWithoutChannelInput
    episodes?: EpisodeUncheckedCreateNestedManyWithoutChannelInput
  }

  export type ChannelCreateOrConnectWithoutChannelHeartsInput = {
    where: ChannelWhereUniqueInput
    create: XOR<ChannelCreateWithoutChannelHeartsInput, ChannelUncheckedCreateWithoutChannelHeartsInput>
  }

  export type HeartUpsertWithoutChannelHeartsInput = {
    update: XOR<HeartUpdateWithoutChannelHeartsInput, HeartUncheckedUpdateWithoutChannelHeartsInput>
    create: XOR<HeartCreateWithoutChannelHeartsInput, HeartUncheckedCreateWithoutChannelHeartsInput>
  }

  export type HeartUpdateWithoutChannelHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutHeartsNestedInput
    episodeHearts?: EpisodeHeartUpdateManyWithoutHeartNestedInput
  }

  export type HeartUncheckedUpdateWithoutChannelHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    episodeHearts?: EpisodeHeartUncheckedUpdateManyWithoutHeartNestedInput
  }

  export type ChannelUpsertWithoutChannelHeartsInput = {
    update: XOR<ChannelUpdateWithoutChannelHeartsInput, ChannelUncheckedUpdateWithoutChannelHeartsInput>
    create: XOR<ChannelCreateWithoutChannelHeartsInput, ChannelUncheckedCreateWithoutChannelHeartsInput>
  }

  export type ChannelUpdateWithoutChannelHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    genres?: GenresOnChannelsUpdateManyWithoutChannelNestedInput
    episodes?: EpisodeUpdateManyWithoutChannelNestedInput
  }

  export type ChannelUncheckedUpdateWithoutChannelHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    publisher?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    genres?: GenresOnChannelsUncheckedUpdateManyWithoutChannelNestedInput
    episodes?: EpisodeUncheckedUpdateManyWithoutChannelNestedInput
  }

  export type HeartCreateWithoutEpisodeHeartsInput = {
    id?: string
    user: UserCreateNestedOneWithoutHeartsInput
    channelHearts?: ChannelHeartCreateNestedManyWithoutHeartInput
  }

  export type HeartUncheckedCreateWithoutEpisodeHeartsInput = {
    id?: string
    userId: string
    channelHearts?: ChannelHeartUncheckedCreateNestedManyWithoutHeartInput
  }

  export type HeartCreateOrConnectWithoutEpisodeHeartsInput = {
    where: HeartWhereUniqueInput
    create: XOR<HeartCreateWithoutEpisodeHeartsInput, HeartUncheckedCreateWithoutEpisodeHeartsInput>
  }

  export type EpisodeCreateWithoutEpisodeHeartsInput = {
    id?: string
    title: string
    thumbnail: string
    channel: ChannelCreateNestedOneWithoutEpisodesInput
  }

  export type EpisodeUncheckedCreateWithoutEpisodeHeartsInput = {
    id?: string
    title: string
    thumbnail: string
    channelId: string
  }

  export type EpisodeCreateOrConnectWithoutEpisodeHeartsInput = {
    where: EpisodeWhereUniqueInput
    create: XOR<EpisodeCreateWithoutEpisodeHeartsInput, EpisodeUncheckedCreateWithoutEpisodeHeartsInput>
  }

  export type HeartUpsertWithoutEpisodeHeartsInput = {
    update: XOR<HeartUpdateWithoutEpisodeHeartsInput, HeartUncheckedUpdateWithoutEpisodeHeartsInput>
    create: XOR<HeartCreateWithoutEpisodeHeartsInput, HeartUncheckedCreateWithoutEpisodeHeartsInput>
  }

  export type HeartUpdateWithoutEpisodeHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutHeartsNestedInput
    channelHearts?: ChannelHeartUpdateManyWithoutHeartNestedInput
  }

  export type HeartUncheckedUpdateWithoutEpisodeHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    channelHearts?: ChannelHeartUncheckedUpdateManyWithoutHeartNestedInput
  }

  export type EpisodeUpsertWithoutEpisodeHeartsInput = {
    update: XOR<EpisodeUpdateWithoutEpisodeHeartsInput, EpisodeUncheckedUpdateWithoutEpisodeHeartsInput>
    create: XOR<EpisodeCreateWithoutEpisodeHeartsInput, EpisodeUncheckedCreateWithoutEpisodeHeartsInput>
  }

  export type EpisodeUpdateWithoutEpisodeHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutEpisodesNestedInput
  }

  export type EpisodeUncheckedUpdateWithoutEpisodeHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
  }

  export type HeartCreateManyUserInput = {
    id?: string
  }

  export type HeartUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    channelHearts?: ChannelHeartUpdateManyWithoutHeartNestedInput
    episodeHearts?: EpisodeHeartUpdateManyWithoutHeartNestedInput
  }

  export type HeartUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    channelHearts?: ChannelHeartUncheckedUpdateManyWithoutHeartNestedInput
    episodeHearts?: EpisodeHeartUncheckedUpdateManyWithoutHeartNestedInput
  }

  export type HeartUncheckedUpdateManyWithoutHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type GenresOnChannelsCreateManyGenreInput = {
    channelId: string
  }

  export type GenresOnChannelsUpdateWithoutGenreInput = {
    channel?: ChannelUpdateOneRequiredWithoutGenresNestedInput
  }

  export type GenresOnChannelsUncheckedUpdateWithoutGenreInput = {
    channelId?: StringFieldUpdateOperationsInput | string
  }

  export type GenresOnChannelsUncheckedUpdateManyWithoutChannelsInput = {
    channelId?: StringFieldUpdateOperationsInput | string
  }

  export type GenresOnChannelsCreateManyChannelInput = {
    genreId: number
  }

  export type EpisodeCreateManyChannelInput = {
    id?: string
    title: string
    thumbnail: string
  }

  export type ChannelHeartCreateManyChannelInput = {
    id?: string
    heartId: string
  }

  export type GenresOnChannelsUpdateWithoutChannelInput = {
    genre?: GenreUpdateOneRequiredWithoutChannelsNestedInput
  }

  export type GenresOnChannelsUncheckedUpdateWithoutChannelInput = {
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type GenresOnChannelsUncheckedUpdateManyWithoutGenresInput = {
    genreId?: IntFieldUpdateOperationsInput | number
  }

  export type EpisodeUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    episodeHearts?: EpisodeHeartUpdateManyWithoutEpisodeNestedInput
  }

  export type EpisodeUncheckedUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
    episodeHearts?: EpisodeHeartUncheckedUpdateManyWithoutEpisodeNestedInput
  }

  export type EpisodeUncheckedUpdateManyWithoutEpisodesInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    thumbnail?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelHeartUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    heart?: HeartUpdateOneRequiredWithoutChannelHeartsNestedInput
  }

  export type ChannelHeartUncheckedUpdateWithoutChannelInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelHeartUncheckedUpdateManyWithoutChannelHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
  }

  export type EpisodeHeartCreateManyEpisodeInput = {
    id?: string
    heartId: string
  }

  export type EpisodeHeartUpdateWithoutEpisodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    heart?: HeartUpdateOneRequiredWithoutEpisodeHeartsNestedInput
  }

  export type EpisodeHeartUncheckedUpdateWithoutEpisodeInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
  }

  export type EpisodeHeartUncheckedUpdateManyWithoutEpisodeHeartsInput = {
    id?: StringFieldUpdateOperationsInput | string
    heartId?: StringFieldUpdateOperationsInput | string
  }

  export type ChannelHeartCreateManyHeartInput = {
    id?: string
    channelId: string
  }

  export type EpisodeHeartCreateManyHeartInput = {
    id?: string
    episodeId: string
  }

  export type ChannelHeartUpdateWithoutHeartInput = {
    id?: StringFieldUpdateOperationsInput | string
    channel?: ChannelUpdateOneRequiredWithoutChannelHeartsNestedInput
  }

  export type ChannelHeartUncheckedUpdateWithoutHeartInput = {
    id?: StringFieldUpdateOperationsInput | string
    channelId?: StringFieldUpdateOperationsInput | string
  }

  export type EpisodeHeartUpdateWithoutHeartInput = {
    id?: StringFieldUpdateOperationsInput | string
    episode?: EpisodeUpdateOneRequiredWithoutEpisodeHeartsNestedInput
  }

  export type EpisodeHeartUncheckedUpdateWithoutHeartInput = {
    id?: StringFieldUpdateOperationsInput | string
    episodeId?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}