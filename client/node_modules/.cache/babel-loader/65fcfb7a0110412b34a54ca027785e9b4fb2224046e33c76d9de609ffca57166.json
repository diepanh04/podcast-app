{"ast":null,"code":"var _jsxFileName = \"/Users/anhnguyen/Desktop/podcast-app/podcast-app/client/src/components/genres/GetChannelsByGenreName.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getChannelsByGenreName } from '../../redux/genres/actions/genres';\nimport IndividualChannelCard from '../channels/IndividualChannelCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetChannelsByGenreName = props => {\n  _s();\n  const {\n    genreName,\n    short\n  } = props;\n  const dispatch = useDispatch();\n  const channels = useSelector(state => state.IndividualGenreReducer.genreName);\n  const [isLoading, setIsLoading] = React.useState(true);\n  useEffect(() => {\n    setIsLoading(true); // Set loading state to true before dispatching\n\n    dispatch(getChannelsByGenreName(genreName)).then(() => {\n      setIsLoading(false); // Set loading state to false after dispatching\n    });\n  }, [dispatch, genreName]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 12\n    }, this); // Render loading state if still loading\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: [channels && short && channels.slice(0, 6).map(channel => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 6,\n      md: 4,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(IndividualChannelCard, {\n        channel: channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 13\n      }, this)\n    }, channel.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 11\n    }, this)), channels && !short && channels.map(channel => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 2,\n      children: /*#__PURE__*/_jsxDEV(IndividualChannelCard, {\n        channel: channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this)\n    }, channel.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(GetChannelsByGenreName, \"zxu1R+6+DVibL5e69azmiK9KnFI=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = GetChannelsByGenreName;\nGetChannelsByGenreName.propTypes = {\n  genreName: PropTypes.string.isRequired,\n  short: PropTypes.bool.isRequired\n};\nexport default GetChannelsByGenreName;\nvar _c;\n$RefreshReg$(_c, \"GetChannelsByGenreName\");","map":{"version":3,"names":["React","useEffect","PropTypes","Grid","useDispatch","useSelector","getChannelsByGenreName","IndividualChannelCard","jsxDEV","_jsxDEV","GetChannelsByGenreName","props","_s","genreName","short","dispatch","channels","state","IndividualGenreReducer","isLoading","setIsLoading","useState","then","children","fileName","_jsxFileName","lineNumber","columnNumber","container","spacing","slice","map","channel","item","sm","md","lg","id","xs","_c","propTypes","string","isRequired","bool","$RefreshReg$"],"sources":["/Users/anhnguyen/Desktop/podcast-app/podcast-app/client/src/components/genres/GetChannelsByGenreName.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@mui/material/Grid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getChannelsByGenreName } from '../../redux/genres/actions/genres';\nimport IndividualChannelCard from '../channels/IndividualChannelCard';\n\nconst GetChannelsByGenreName = (props) => {\n  const { genreName, short } = props;\n  const dispatch = useDispatch();\n  const channels = useSelector((state) => state.IndividualGenreReducer.genreName);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  useEffect(() => {\n    setIsLoading(true); // Set loading state to true before dispatching\n\n    dispatch(getChannelsByGenreName(genreName))\n      .then(() => {\n        setIsLoading(false); // Set loading state to false after dispatching\n      });\n  }, [dispatch, genreName]);\n\n  if (isLoading) {\n    return <div>Loading...</div>; // Render loading state if still loading\n  }\n\n  return (\n    <Grid container spacing={3}>\n      {channels && short &&\n        channels.slice(0, 6).map((channel) => (\n          <Grid item sm={6} md={4} lg={2} key={channel.id}>\n            <IndividualChannelCard channel={channel} />\n          </Grid>\n        ))}\n      {channels && !short &&\n        channels.map((channel) => (\n          <Grid item xs={2} key={channel.id}>\n            <IndividualChannelCard channel={channel} />\n          </Grid>\n        ))}\n    </Grid>\n  );\n};\n\nGetChannelsByGenreName.propTypes = {\n  genreName: PropTypes.string.isRequired,\n  short: PropTypes.bool.isRequired,\n};\n\nexport default GetChannelsByGenreName;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}