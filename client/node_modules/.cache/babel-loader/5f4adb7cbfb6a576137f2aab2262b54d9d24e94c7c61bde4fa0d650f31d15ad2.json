{"ast":null,"code":"var _jsxFileName = \"/Users/anhnguyen/Desktop/podcast-app/podcast-app/client/src/Components/GetBestChannelsByGenreName.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getChannelsByGenreName } from '../actions/genres.js';\nimport IndividualChannelCard from './IndividualChannelCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetBestChannelsByGenreName = props => {\n  _s();\n  const {\n    genreName,\n    short\n  } = props;\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch(getChannelsByGenreName(genreName));\n    };\n    fetchData();\n  }, [genreName]);\n  const channels = useSelector(state => state.genres[genreName]);\n  console.log(channels);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: channels && channels.map(channel => {\n      /*#__PURE__*/_jsxDEV(Grid, {\n        item: true,\n        xs: 3,\n        children: /*#__PURE__*/_jsxDEV(IndividualChannelCard, {\n          channel: channel\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(GetBestChannelsByGenreName, \"+A986EfektYIqdTLIf2iwDqWPGs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = GetBestChannelsByGenreName;\nGetBestChannelsByGenreName.propTypes = {\n  genreId: PropTypes.string.isRequired,\n  short: PropTypes.bool.isRequired\n};\nexport default GetBestChannelsByGenreName;\nvar _c;\n$RefreshReg$(_c, \"GetBestChannelsByGenreName\");","map":{"version":3,"names":["React","useState","useEffect","PropTypes","Typography","Grid","useDispatch","useSelector","Link","getChannelsByGenreName","IndividualChannelCard","jsxDEV","_jsxDEV","GetBestChannelsByGenreName","props","_s","genreName","short","dispatch","fetchData","channels","state","genres","console","log","container","spacing","children","map","channel","item","xs","fileName","_jsxFileName","lineNumber","columnNumber","_c","propTypes","genreId","string","isRequired","bool","$RefreshReg$"],"sources":["/Users/anhnguyen/Desktop/podcast-app/podcast-app/client/src/Components/GetBestChannelsByGenreName.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Typography from '@mui/material/Typography';\nimport Grid from '@mui/material/Grid';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { getChannelsByGenreName } from '../actions/genres.js'\nimport IndividualChannelCard from './IndividualChannelCard';\n\nconst GetBestChannelsByGenreName = (props) => {\n  const { genreName, short } = props;\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch(getChannelsByGenreName(genreName));\n    };\n    fetchData();\n  }, [genreName]);\n\n  const channels = useSelector((state) => state.genres[genreName]);\n  console.log(channels);\n\n  return (\n    <Grid container spacing={3}>\n      {/* {channels && <ShortPodcastList channels={channels} />} */}\n      {channels &&\n        channels.map((channel) => {\n          <Grid item xs={3}>\n            <IndividualChannelCard channel={channel} />\n          </Grid>\n        })\n      }\n    </Grid>\n  );\n};\n\nGetBestChannelsByGenreName.propTypes = {\n  genreId: PropTypes.string.isRequired,\n  short: PropTypes.bool.isRequired,\n};\n\nexport default GetBestChannelsByGenreName;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,IAAI,MAAM,oBAAoB;AACrC,SAASC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AACtD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,sBAAsB,QAAQ,sBAAsB;AAC7D,OAAOC,qBAAqB,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5D,MAAMC,0BAA0B,GAAIC,KAAK,IAAK;EAAAC,EAAA;EAC5C,MAAM;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAGH,KAAK;EAClC,MAAMI,QAAQ,GAAGZ,WAAW,CAAC,CAAC;EAE9BJ,SAAS,CAAC,MAAM;IACd,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BD,QAAQ,CAACT,sBAAsB,CAACO,SAAS,CAAC,CAAC;IAC7C,CAAC;IACDG,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,CAACH,SAAS,CAAC,CAAC;EAEf,MAAMI,QAAQ,GAAGb,WAAW,CAAEc,KAAK,IAAKA,KAAK,CAACC,MAAM,CAACN,SAAS,CAAC,CAAC;EAChEO,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAErB,oBACER,OAAA,CAACP,IAAI;IAACoB,SAAS;IAACC,OAAO,EAAE,CAAE;IAAAC,QAAA,EAExBP,QAAQ,IACPA,QAAQ,CAACQ,GAAG,CAAEC,OAAO,IAAK;MACxB,aAAAjB,OAAA,CAACP,IAAI;QAACyB,IAAI;QAACC,EAAE,EAAE,CAAE;QAAAJ,QAAA,eACff,OAAA,CAACF,qBAAqB;UAACmB,OAAO,EAAEA;QAAQ;UAAAG,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvC,CAAC;IACT,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAEA,CAAC;AAEX,CAAC;AAACpB,EAAA,CA1BIF,0BAA0B;EAAA,QAEbP,WAAW,EASXC,WAAW;AAAA;AAAA6B,EAAA,GAXxBvB,0BAA0B;AA4BhCA,0BAA0B,CAACwB,SAAS,GAAG;EACrCC,OAAO,EAAEnC,SAAS,CAACoC,MAAM,CAACC,UAAU;EACpCvB,KAAK,EAAEd,SAAS,CAACsC,IAAI,CAACD;AACxB,CAAC;AAED,eAAe3B,0BAA0B;AAAC,IAAAuB,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}