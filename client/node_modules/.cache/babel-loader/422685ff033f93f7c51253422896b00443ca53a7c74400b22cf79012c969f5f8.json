{"ast":null,"code":"var _jsxFileName = \"/Users/anhnguyen/Desktop/podcast-app/podcast-app/client/src/components/genres/GetChannelsByGenreName.js\",\n  _s = $RefreshSig$();\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GetChannelsByGenreName = props => {\n  _s();\n  const {\n    genreName,\n    short\n  } = props;\n  const dispatch = useDispatch();\n  const channels = useSelector(state => state.IndividualGenreReducer.genreName);\n  const [isLoading, setIsLoading] = React.useState(true);\n  useEffect(() => {\n    setIsLoading(true); // Set loading state to true before dispatching\n\n    dispatch(getChannelsByGenreName(genreName)).then(() => {\n      setIsLoading(false); // Set loading state to false after dispatching\n    });\n  }, [dispatch, genreName]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 12\n    }, this); // Render loading state if still loading\n  }\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 3,\n    children: [channels && short && channels.slice(0, 6).map(channel => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      sm: 6,\n      md: 4,\n      lg: 2,\n      children: /*#__PURE__*/_jsxDEV(IndividualChannelCard, {\n        channel: channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 13\n      }, this)\n    }, channel.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 11\n    }, this)), channels && !short && channels.map(channel => /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 2,\n      children: /*#__PURE__*/_jsxDEV(IndividualChannelCard, {\n        channel: channel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)\n    }, channel.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 11\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n_s(GetChannelsByGenreName, \"zxu1R+6+DVibL5e69azmiK9KnFI=\", true);\n_c = GetChannelsByGenreName;\nGetChannelsByGenreName.propTypes = {\n  genreName: PropTypes.string.isRequired,\n  short: PropTypes.bool.isRequired\n};\nexport default GetChannelsByGenreName;\nvar _c;\n$RefreshReg$(_c, \"GetChannelsByGenreName\");","map":{"version":3,"names":["GetChannelsByGenreName","props","_s","genreName","short","dispatch","useDispatch","channels","useSelector","state","IndividualGenreReducer","isLoading","setIsLoading","React","useState","useEffect","getChannelsByGenreName","then","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","Grid","container","spacing","slice","map","channel","item","sm","md","lg","IndividualChannelCard","id","xs","_c","propTypes","PropTypes","string","isRequired","bool","$RefreshReg$"],"sources":["/Users/anhnguyen/Desktop/podcast-app/podcast-app/client/src/components/genres/GetChannelsByGenreName.js"],"sourcesContent":["const GetChannelsByGenreName = (props) => {\n  const { genreName, short } = props;\n  const dispatch = useDispatch();\n  const channels = useSelector((state) => state.IndividualGenreReducer.genreName);\n  const [isLoading, setIsLoading] = React.useState(true);\n\n  useEffect(() => {\n    setIsLoading(true); // Set loading state to true before dispatching\n\n    dispatch(getChannelsByGenreName(genreName))\n      .then(() => {\n        setIsLoading(false); // Set loading state to false after dispatching\n      });\n  }, [dispatch, genreName]);\n\n  if (isLoading) {\n    return <div>Loading...</div>; // Render loading state if still loading\n  }\n\n  return (\n    <Grid container spacing={3}>\n      {channels && short &&\n        channels.slice(0, 6).map((channel) => (\n          <Grid item sm={6} md={4} lg={2} key={channel.id}>\n            <IndividualChannelCard channel={channel} />\n          </Grid>\n        ))}\n      {channels && !short &&\n        channels.map((channel) => (\n          <Grid item xs={2} key={channel.id}>\n            <IndividualChannelCard channel={channel} />\n          </Grid>\n        ))}\n    </Grid>\n  );\n};\n\nGetChannelsByGenreName.propTypes = {\n  genreName: PropTypes.string.isRequired,\n  short: PropTypes.bool.isRequired,\n};\n\nexport default GetChannelsByGenreName;\n"],"mappings":";;;AAAA,MAAMA,sBAAsB,GAAIC,KAAK,IAAK;EAAAC,EAAA;EACxC,MAAM;IAAEC,SAAS;IAAEC;EAAM,CAAC,GAAGH,KAAK;EAClC,MAAMI,QAAQ,GAAGC,WAAW,CAAC,CAAC;EAC9B,MAAMC,QAAQ,GAAGC,WAAW,CAAEC,KAAK,IAAKA,KAAK,CAACC,sBAAsB,CAACP,SAAS,CAAC;EAC/E,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGC,KAAK,CAACC,QAAQ,CAAC,IAAI,CAAC;EAEtDC,SAAS,CAAC,MAAM;IACdH,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;;IAEpBP,QAAQ,CAACW,sBAAsB,CAACb,SAAS,CAAC,CAAC,CACxCc,IAAI,CAAC,MAAM;MACVL,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC;EACN,CAAC,EAAE,CAACP,QAAQ,EAAEF,SAAS,CAAC,CAAC;EAEzB,IAAIQ,SAAS,EAAE;IACb,oBAAOO,OAAA;MAAAC,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAChC;;EAEA,oBACEL,OAAA,CAACM,IAAI;IAACC,SAAS;IAACC,OAAO,EAAE,CAAE;IAAAP,QAAA,GACxBZ,QAAQ,IAAIH,KAAK,IAChBG,QAAQ,CAACoB,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAEC,OAAO,iBAC/BX,OAAA,CAACM,IAAI;MAACM,IAAI;MAACC,EAAE,EAAE,CAAE;MAACC,EAAE,EAAE,CAAE;MAACC,EAAE,EAAE,CAAE;MAAAd,QAAA,eAC7BD,OAAA,CAACgB,qBAAqB;QAACL,OAAO,EAAEA;MAAQ;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GADRM,OAAO,CAACM,EAAE;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEzC,CACP,CAAC,EACHhB,QAAQ,IAAI,CAACH,KAAK,IACjBG,QAAQ,CAACqB,GAAG,CAAEC,OAAO,iBACnBX,OAAA,CAACM,IAAI;MAACM,IAAI;MAACM,EAAE,EAAE,CAAE;MAAAjB,QAAA,eACfD,OAAA,CAACgB,qBAAqB;QAACL,OAAO,EAAEA;MAAQ;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC,GADtBM,OAAO,CAACM,EAAE;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAE3B,CACP,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEX,CAAC;AAACrB,EAAA,CAnCIF,sBAAsB;AAAAqC,EAAA,GAAtBrC,sBAAsB;AAqC5BA,sBAAsB,CAACsC,SAAS,GAAG;EACjCnC,SAAS,EAAEoC,SAAS,CAACC,MAAM,CAACC,UAAU;EACtCrC,KAAK,EAAEmC,SAAS,CAACG,IAAI,CAACD;AACxB,CAAC;AAED,eAAezC,sBAAsB;AAAC,IAAAqC,EAAA;AAAAM,YAAA,CAAAN,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}